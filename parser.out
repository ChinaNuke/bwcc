Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     assignment_expression_opt -> empty
Rule 2     assignment_expression_opt -> assignment_expression
Rule 3     block_item_list_opt -> empty
Rule 4     block_item_list_opt -> block_item_list
Rule 5     declaration_list_opt -> empty
Rule 6     declaration_list_opt -> declaration_list
Rule 7     declaration_specifiers_opt -> empty
Rule 8     declaration_specifiers_opt -> declaration_specifiers
Rule 9     expression_opt -> empty
Rule 10    expression_opt -> expression
Rule 11    identifier_list_opt -> empty
Rule 12    identifier_list_opt -> identifier_list
Rule 13    init_declarator_list_opt -> empty
Rule 14    init_declarator_list_opt -> init_declarator_list
Rule 15    initializer_list_opt -> empty
Rule 16    initializer_list_opt -> initializer_list
Rule 17    type_qualifier_list_opt -> empty
Rule 18    type_qualifier_list_opt -> type_qualifier_list
Rule 19    translation_unit_or_empty -> translation_unit
Rule 20    translation_unit_or_empty -> empty
Rule 21    translation_unit -> external_declaration
Rule 22    translation_unit -> translation_unit external_declaration
Rule 23    external_declaration -> function_defination
Rule 24    external_declaration -> declaration
Rule 25    function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement
Rule 26    declaration_list -> declaration
Rule 27    declaration_list -> declaration_list declaration
Rule 28    statement -> expression_statement
Rule 29    statement -> compound_statement
Rule 30    statement -> selection_statement
Rule 31    statement -> iteration_statement
Rule 32    statement -> jump_statement
Rule 33    compound_statement -> brace_open block_item_list_opt brace_close
Rule 34    block_item_list -> block_item
Rule 35    block_item_list -> block_item_list block_item
Rule 36    block_item -> declaration
Rule 37    block_item -> statement
Rule 38    expression_statement -> expression_opt SEMI
Rule 39    selection_statement -> IF LPAREN expression RPAREN statement
Rule 40    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 41    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 42    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 43    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 44    iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 45    jump_statement -> BREAK SEMI
Rule 46    jump_statement -> CONTINUE SEMI
Rule 47    jump_statement -> RETURN expression SEMI
Rule 48    jump_statement -> RETURN SEMI
Rule 49    declaration -> declaration_specifiers init_declarator_list SEMI
Rule 50    init_declarator_list -> init_declarator
Rule 51    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 52    init_declarator -> declarator
Rule 53    init_declarator -> declarator EQUALS initializer
Rule 54    declarator -> direct_declarator
Rule 55    declarator -> pointer direct_declarator
Rule 56    direct_declarator -> ID
Rule 57    direct_declarator -> LPAREN declarator RPAREN
Rule 58    direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 59    direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
Rule 60    direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 61    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 62    direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 63    identifier_list -> identifier
Rule 64    identifier_list -> identifier_list COMMA identifier
Rule 65    parameter_type_list -> parameter_list
Rule 66    parameter_list -> parameter_declaration
Rule 67    parameter_list -> parameter_list COMMA parameter_declaration
Rule 68    parameter_declaration -> declaration_specifiers declarator
Rule 69    declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
Rule 70    declaration_specifiers -> type_specifier declaration_specifiers_opt
Rule 71    declaration_specifiers -> type_qualifier declaration_specifiers_opt
Rule 72    pointer -> TIMES type_qualifier_list_opt
Rule 73    pointer -> TIMES type_qualifier_list_opt pointer
Rule 74    type_qualifier_list -> type_qualifier
Rule 75    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 76    type_qualifier -> CONST
Rule 77    type_qualifier -> VOLATILE
Rule 78    storage_class_specifier -> AUTO
Rule 79    storage_class_specifier -> REGISTER
Rule 80    storage_class_specifier -> STATIC
Rule 81    storage_class_specifier -> EXTERN
Rule 82    storage_class_specifier -> TYPEDEF
Rule 83    type_specifier -> type_specifier_simple
Rule 84    type_specifier -> enum_specifier
Rule 85    type_specifier -> struct_specifier
Rule 86    type_specifier_simple -> VOID
Rule 87    type_specifier_simple -> CHAR
Rule 88    type_specifier_simple -> SHORT
Rule 89    type_specifier_simple -> INT
Rule 90    type_specifier_simple -> LONG
Rule 91    type_specifier_simple -> FLOAT
Rule 92    type_specifier_simple -> DOUBLE
Rule 93    type_specifier_simple -> SIGNED
Rule 94    type_specifier_simple -> UNSIGNED
Rule 95    type_specifier_simple -> TYPEID
Rule 96    enum_specifier -> ENUM ID
Rule 97    enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 98    enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 99    enumerator_list -> enumerator
Rule 100   enumerator_list -> enumerator_list COMMA
Rule 101   enumerator_list -> enumerator_list COMMA enumerator
Rule 102   enumerator -> ID
Rule 103   enumerator -> ID EQUALS constant_expression
Rule 104   struct_specifier -> STRUCT ID
Rule 105   struct_specifier -> STRUCT brace_open struct_declaration_list brace_close
Rule 106   struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close
Rule 107   struct_declaration_list -> struct_declaration
Rule 108   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 109   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI
Rule 110   specifier_qualifier_list -> specifier_qualifier_list type_specifier
Rule 111   specifier_qualifier_list -> specifier_qualifier_list type_qualifier
Rule 112   specifier_qualifier_list -> type_specifier
Rule 113   specifier_qualifier_list -> type_qualifier_list type_specifier
Rule 114   struct_declarator_list -> struct_declarator
Rule 115   struct_declarator_list -> struct_declarator COMMA struct_declarator
Rule 116   struct_declarator -> declarator
Rule 117   initializer -> assignment_expression
Rule 118   initializer -> brace_open initializer_list_opt brace_close
Rule 119   initializer -> brace_open initializer_list COMMA brace_close
Rule 120   initializer_list -> initializer
Rule 121   initializer_list -> initializer_list COMMA initializer
Rule 122   constant_expression -> conditional_expression
Rule 123   expression -> assignment_expression
Rule 124   expression -> expression COMMA assignment_expression
Rule 125   assignment_expression -> conditional_expression
Rule 126   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 127   assignment_operator -> EQUALS
Rule 128   assignment_operator -> XOREQUAL
Rule 129   assignment_operator -> TIMESEQUAL
Rule 130   assignment_operator -> DIVEQUAL
Rule 131   assignment_operator -> MODEQUAL
Rule 132   assignment_operator -> PLUSEQUAL
Rule 133   assignment_operator -> MINUSEQUAL
Rule 134   assignment_operator -> LSHIFTEQUAL
Rule 135   assignment_operator -> RSHIFTEQUAL
Rule 136   assignment_operator -> ANDEQUAL
Rule 137   assignment_operator -> OREQUAL
Rule 138   conditional_expression -> binary_expression
Rule 139   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 140   binary_expression -> cast_expression
Rule 141   binary_expression -> binary_expression TIMES binary_expression
Rule 142   binary_expression -> binary_expression DIVIDE binary_expression
Rule 143   binary_expression -> binary_expression MOD binary_expression
Rule 144   binary_expression -> binary_expression PLUS binary_expression
Rule 145   binary_expression -> binary_expression MINUS binary_expression
Rule 146   binary_expression -> binary_expression LSHIFT binary_expression
Rule 147   binary_expression -> binary_expression RSHIFT binary_expression
Rule 148   binary_expression -> binary_expression GT binary_expression
Rule 149   binary_expression -> binary_expression GE binary_expression
Rule 150   binary_expression -> binary_expression LT binary_expression
Rule 151   binary_expression -> binary_expression LE binary_expression
Rule 152   binary_expression -> binary_expression EQ binary_expression
Rule 153   binary_expression -> binary_expression NE binary_expression
Rule 154   binary_expression -> binary_expression AND binary_expression
Rule 155   binary_expression -> binary_expression XOR binary_expression
Rule 156   binary_expression -> binary_expression OR binary_expression
Rule 157   binary_expression -> binary_expression LAND binary_expression
Rule 158   binary_expression -> binary_expression LOR binary_expression
Rule 159   cast_expression -> unary_expression
Rule 160   unary_expression -> postfix_expression
Rule 161   unary_expression -> PLUSPLUS unary_expression
Rule 162   unary_expression -> MINUSMINUS unary_expression
Rule 163   unary_expression -> unary_operator cast_expression
Rule 164   unary_operator -> AND
Rule 165   unary_operator -> TIMES
Rule 166   unary_operator -> PLUS
Rule 167   unary_operator -> MINUS
Rule 168   unary_operator -> NOT
Rule 169   unary_operator -> LNOT
Rule 170   argument_expression_list -> assignment_expression
Rule 171   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 172   postfix_expression -> primary_expression
Rule 173   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 174   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 175   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 176   postfix_expression -> postfix_expression PERIOD identifier
Rule 177   postfix_expression -> postfix_expression ARROW identifier
Rule 178   postfix_expression -> postfix_expression PLUSPLUS
Rule 179   postfix_expression -> postfix_expression MINUSMINUS
Rule 180   primary_expression -> identifier
Rule 181   primary_expression -> constant
Rule 182   primary_expression -> string_literal
Rule 183   primary_expression -> LPAREN expression RPAREN
Rule 184   identifier -> ID
Rule 185   constant -> INT_CONST
Rule 186   constant -> FLOAT_CONST
Rule 187   constant -> CHAR_CONST
Rule 188   string_literal -> STRING_LITERAL
Rule 189   brace_open -> LBRACE
Rule 190   brace_close -> RBRACE
Rule 191   empty -> <empty>

Terminals, with rules where they appear

AND                  : 154 164
ANDEQUAL             : 136
ARROW                : 177
AUTO                 : 78
BREAK                : 45
CHAR                 : 87
CHAR_CONST           : 187
COLON                : 139
COMMA                : 51 64 67 100 101 115 119 121 124 171
CONDOP               : 139
CONST                : 76
CONTINUE             : 46
DIVEQUAL             : 130
DIVIDE               : 142
DO                   : 42
DOUBLE               : 92
ELSE                 : 40
ENUM                 : 96 97 98
EQ                   : 152
EQUALS               : 53 103 127
EXTERN               : 81
FLOAT                : 91
FLOAT_CONST          : 186
FOR                  : 43 44
GE                   : 149
GT                   : 148
ID                   : 56 96 98 102 103 104 106 184
IF                   : 39 40
INT                  : 89
INT_CONST            : 185
LAND                 : 157
LBRACE               : 189
LBRACKET             : 58 59 60 173
LE                   : 151
LNOT                 : 169
LONG                 : 90
LOR                  : 158
LPAREN               : 39 40 41 42 43 44 57 61 62 174 175 183
LSHIFT               : 146
LSHIFTEQUAL          : 134
LT                   : 150
MINUS                : 145 167
MINUSEQUAL           : 133
MINUSMINUS           : 162 179
MOD                  : 143
MODEQUAL             : 131
NE                   : 153
NOT                  : 168
OR                   : 156
OREQUAL              : 137
PERIOD               : 176
PLUS                 : 144 166
PLUSEQUAL            : 132
PLUSPLUS             : 161 178
RBRACE               : 190
RBRACKET             : 58 59 60 173
REGISTER             : 79
RETURN               : 47 48
RPAREN               : 39 40 41 42 43 44 57 61 62 174 175 183
RSHIFT               : 147
RSHIFTEQUAL          : 135
SEMI                 : 38 42 43 43 44 45 46 47 48 49 109
SHORT                : 88
SIGNED               : 93
STATIC               : 59 60 80
STRING_LITERAL       : 188
STRUCT               : 104 105 106
TIMES                : 72 73 141 165
TIMESEQUAL           : 129
TYPEDEF              : 82
TYPEID               : 95
UNSIGNED             : 94
VOID                 : 86
VOLATILE             : 77
WHILE                : 41 42
XOR                  : 155
XOREQUAL             : 128
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 171 174
assignment_expression : 2 59 60 117 123 124 126 170 171
assignment_expression_opt : 58
assignment_operator  : 126
binary_expression    : 138 139 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149 150 150 151 151 152 152 153 153 154 154 155 155 156 156 157 157 158 158
block_item           : 34 35
block_item_list      : 4 35
block_item_list_opt  : 33
brace_close          : 33 97 98 105 106 118 119
brace_open           : 33 97 98 105 106 118 119
cast_expression      : 140 163
compound_statement   : 25 29
conditional_expression : 122 125 139
constant             : 181
constant_expression  : 103
declaration          : 24 26 27 36 44
declaration_list     : 6 27
declaration_list_opt : 25
declaration_specifiers : 8 25 49 68
declaration_specifiers_opt : 69 70 71
declarator           : 25 52 53 57 68 116
direct_declarator    : 54 55 58 59 60 61 62
empty                : 1 3 5 7 9 11 13 15 17 20
enum_specifier       : 84
enumerator           : 99 101
enumerator_list      : 97 98 100 101
expression           : 10 39 40 41 42 47 124 139 173 183
expression_opt       : 38 43 43 43 44 44
expression_statement : 28
external_declaration : 21 22
function_defination  : 23
identifier           : 63 64 176 177 180
identifier_list      : 12 64
identifier_list_opt  : 61
init_declarator      : 50 51
init_declarator_list : 14 49 51
init_declarator_list_opt : 
initializer          : 53 120 121
initializer_list     : 16 119 121
initializer_list_opt : 118
iteration_statement  : 31
jump_statement       : 32
parameter_declaration : 66 67
parameter_list       : 65 67
parameter_type_list  : 62
pointer              : 55 73
postfix_expression   : 160 173 174 175 176 177 178 179
primary_expression   : 172
selection_statement  : 30
specifier_qualifier_list : 109 110 111
statement            : 37 39 40 40 41 42 43 44
storage_class_specifier : 69
string_literal       : 182
struct_declaration   : 107 108
struct_declaration_list : 105 106 108
struct_declarator    : 114 115 115
struct_declarator_list : 109
struct_specifier     : 85
translation_unit     : 19 22
translation_unit_or_empty : 0
type_qualifier       : 71 74 75 111
type_qualifier_list  : 18 59 60 75 113
type_qualifier_list_opt : 58 72 73
type_specifier       : 70 110 112 113
type_specifier_simple : 83
unary_expression     : 126 159 161 162
unary_operator       : 163

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (19) translation_unit_or_empty -> . translation_unit
    (20) translation_unit_or_empty -> . empty
    (21) translation_unit -> . external_declaration
    (22) translation_unit -> . translation_unit external_declaration
    (191) empty -> .
    (23) external_declaration -> . function_defination
    (24) external_declaration -> . declaration
    (25) function_defination -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    $end            reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    translation_unit_or_empty      shift and go to state 1
    translation_unit               shift and go to state 2
    empty                          shift and go to state 3
    external_declaration           shift and go to state 4
    function_defination            shift and go to state 5
    declaration                    shift and go to state 6
    declaration_specifiers         shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 1

    (0) S' -> translation_unit_or_empty .



state 2

    (19) translation_unit_or_empty -> translation_unit .
    (22) translation_unit -> translation_unit . external_declaration
    (23) external_declaration -> . function_defination
    (24) external_declaration -> . declaration
    (25) function_defination -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    $end            reduce using rule 19 (translation_unit_or_empty -> translation_unit .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    external_declaration           shift and go to state 33
    function_defination            shift and go to state 5
    declaration                    shift and go to state 6
    declaration_specifiers         shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 3

    (20) translation_unit_or_empty -> empty .

    $end            reduce using rule 20 (translation_unit_or_empty -> empty .)


state 4

    (21) translation_unit -> external_declaration .

    AUTO            reduce using rule 21 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 21 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 21 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 21 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 21 (translation_unit -> external_declaration .)
    CONST           reduce using rule 21 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 21 (translation_unit -> external_declaration .)
    VOID            reduce using rule 21 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 21 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 21 (translation_unit -> external_declaration .)
    INT             reduce using rule 21 (translation_unit -> external_declaration .)
    LONG            reduce using rule 21 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 21 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 21 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 21 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 21 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 21 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 21 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 21 (translation_unit -> external_declaration .)
    $end            reduce using rule 21 (translation_unit -> external_declaration .)


state 5

    (23) external_declaration -> function_defination .

    AUTO            reduce using rule 23 (external_declaration -> function_defination .)
    REGISTER        reduce using rule 23 (external_declaration -> function_defination .)
    STATIC          reduce using rule 23 (external_declaration -> function_defination .)
    EXTERN          reduce using rule 23 (external_declaration -> function_defination .)
    TYPEDEF         reduce using rule 23 (external_declaration -> function_defination .)
    CONST           reduce using rule 23 (external_declaration -> function_defination .)
    VOLATILE        reduce using rule 23 (external_declaration -> function_defination .)
    VOID            reduce using rule 23 (external_declaration -> function_defination .)
    CHAR            reduce using rule 23 (external_declaration -> function_defination .)
    SHORT           reduce using rule 23 (external_declaration -> function_defination .)
    INT             reduce using rule 23 (external_declaration -> function_defination .)
    LONG            reduce using rule 23 (external_declaration -> function_defination .)
    FLOAT           reduce using rule 23 (external_declaration -> function_defination .)
    DOUBLE          reduce using rule 23 (external_declaration -> function_defination .)
    SIGNED          reduce using rule 23 (external_declaration -> function_defination .)
    UNSIGNED        reduce using rule 23 (external_declaration -> function_defination .)
    TYPEID          reduce using rule 23 (external_declaration -> function_defination .)
    ENUM            reduce using rule 23 (external_declaration -> function_defination .)
    STRUCT          reduce using rule 23 (external_declaration -> function_defination .)
    $end            reduce using rule 23 (external_declaration -> function_defination .)


state 6

    (24) external_declaration -> declaration .

    AUTO            reduce using rule 24 (external_declaration -> declaration .)
    REGISTER        reduce using rule 24 (external_declaration -> declaration .)
    STATIC          reduce using rule 24 (external_declaration -> declaration .)
    EXTERN          reduce using rule 24 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 24 (external_declaration -> declaration .)
    CONST           reduce using rule 24 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 24 (external_declaration -> declaration .)
    VOID            reduce using rule 24 (external_declaration -> declaration .)
    CHAR            reduce using rule 24 (external_declaration -> declaration .)
    SHORT           reduce using rule 24 (external_declaration -> declaration .)
    INT             reduce using rule 24 (external_declaration -> declaration .)
    LONG            reduce using rule 24 (external_declaration -> declaration .)
    FLOAT           reduce using rule 24 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 24 (external_declaration -> declaration .)
    SIGNED          reduce using rule 24 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 24 (external_declaration -> declaration .)
    TYPEID          reduce using rule 24 (external_declaration -> declaration .)
    ENUM            reduce using rule 24 (external_declaration -> declaration .)
    STRUCT          reduce using rule 24 (external_declaration -> declaration .)
    $end            reduce using rule 24 (external_declaration -> declaration .)


state 7

    (25) function_defination -> declaration_specifiers . declarator declaration_list_opt compound_statement
    (49) declaration -> declaration_specifiers . init_declarator_list SEMI
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (50) init_declarator_list -> . init_declarator
    (51) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer
    (52) init_declarator -> . declarator
    (53) init_declarator -> . declarator EQUALS initializer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    declarator                     shift and go to state 34
    init_declarator_list           shift and go to state 35
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37
    init_declarator                shift and go to state 38

state 8

    (69) declaration_specifiers -> storage_class_specifier . declaration_specifiers_opt
    (7) declaration_specifiers_opt -> . empty
    (8) declaration_specifiers_opt -> . declaration_specifiers
    (191) empty -> .
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    ID              reduce using rule 191 (empty -> .)
    LPAREN          reduce using rule 191 (empty -> .)
    TIMES           reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    storage_class_specifier        shift and go to state 8
    declaration_specifiers_opt     shift and go to state 42
    empty                          shift and go to state 43
    declaration_specifiers         shift and go to state 44
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 9

    (70) declaration_specifiers -> type_specifier . declaration_specifiers_opt
    (7) declaration_specifiers_opt -> . empty
    (8) declaration_specifiers_opt -> . declaration_specifiers
    (191) empty -> .
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    ID              reduce using rule 191 (empty -> .)
    LPAREN          reduce using rule 191 (empty -> .)
    TIMES           reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    type_specifier                 shift and go to state 9
    declaration_specifiers_opt     shift and go to state 45
    empty                          shift and go to state 43
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 10

    (71) declaration_specifiers -> type_qualifier . declaration_specifiers_opt
    (7) declaration_specifiers_opt -> . empty
    (8) declaration_specifiers_opt -> . declaration_specifiers
    (191) empty -> .
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    ID              reduce using rule 191 (empty -> .)
    LPAREN          reduce using rule 191 (empty -> .)
    TIMES           reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    type_qualifier                 shift and go to state 10
    declaration_specifiers_opt     shift and go to state 46
    empty                          shift and go to state 43
    declaration_specifiers         shift and go to state 44
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 11

    (78) storage_class_specifier -> AUTO .

    AUTO            reduce using rule 78 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 78 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 78 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 78 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 78 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 78 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 78 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 78 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 78 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 78 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 78 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 78 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 78 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 78 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 78 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 78 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 78 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 78 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 78 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 78 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 78 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 78 (storage_class_specifier -> AUTO .)


state 12

    (79) storage_class_specifier -> REGISTER .

    AUTO            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 79 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 79 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 79 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 79 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 79 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 79 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 79 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 79 (storage_class_specifier -> REGISTER .)


state 13

    (80) storage_class_specifier -> STATIC .

    AUTO            reduce using rule 80 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 80 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 80 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 80 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 80 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 80 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 80 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 80 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 80 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 80 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 80 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 80 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 80 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 80 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 80 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 80 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 80 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 80 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 80 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 80 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 80 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 80 (storage_class_specifier -> STATIC .)


state 14

    (81) storage_class_specifier -> EXTERN .

    AUTO            reduce using rule 81 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 81 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 81 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 81 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 81 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 81 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 81 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 81 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 81 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 81 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 81 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 81 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 81 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 81 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 81 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 81 (storage_class_specifier -> EXTERN .)


state 15

    (82) storage_class_specifier -> TYPEDEF .

    AUTO            reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 82 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 82 (storage_class_specifier -> TYPEDEF .)


state 16

    (83) type_specifier -> type_specifier_simple .

    AUTO            reduce using rule 83 (type_specifier -> type_specifier_simple .)
    REGISTER        reduce using rule 83 (type_specifier -> type_specifier_simple .)
    STATIC          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    EXTERN          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    TYPEDEF         reduce using rule 83 (type_specifier -> type_specifier_simple .)
    CONST           reduce using rule 83 (type_specifier -> type_specifier_simple .)
    VOLATILE        reduce using rule 83 (type_specifier -> type_specifier_simple .)
    VOID            reduce using rule 83 (type_specifier -> type_specifier_simple .)
    CHAR            reduce using rule 83 (type_specifier -> type_specifier_simple .)
    SHORT           reduce using rule 83 (type_specifier -> type_specifier_simple .)
    INT             reduce using rule 83 (type_specifier -> type_specifier_simple .)
    LONG            reduce using rule 83 (type_specifier -> type_specifier_simple .)
    FLOAT           reduce using rule 83 (type_specifier -> type_specifier_simple .)
    DOUBLE          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    SIGNED          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    UNSIGNED        reduce using rule 83 (type_specifier -> type_specifier_simple .)
    TYPEID          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    ENUM            reduce using rule 83 (type_specifier -> type_specifier_simple .)
    STRUCT          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    ID              reduce using rule 83 (type_specifier -> type_specifier_simple .)
    LPAREN          reduce using rule 83 (type_specifier -> type_specifier_simple .)
    TIMES           reduce using rule 83 (type_specifier -> type_specifier_simple .)


state 17

    (84) type_specifier -> enum_specifier .

    AUTO            reduce using rule 84 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 84 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 84 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 84 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 84 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 84 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 84 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 84 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 84 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 84 (type_specifier -> enum_specifier .)
    INT             reduce using rule 84 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 84 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 84 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 84 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 84 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 84 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 84 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 84 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 84 (type_specifier -> enum_specifier .)
    ID              reduce using rule 84 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 84 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 84 (type_specifier -> enum_specifier .)


state 18

    (85) type_specifier -> struct_specifier .

    AUTO            reduce using rule 85 (type_specifier -> struct_specifier .)
    REGISTER        reduce using rule 85 (type_specifier -> struct_specifier .)
    STATIC          reduce using rule 85 (type_specifier -> struct_specifier .)
    EXTERN          reduce using rule 85 (type_specifier -> struct_specifier .)
    TYPEDEF         reduce using rule 85 (type_specifier -> struct_specifier .)
    CONST           reduce using rule 85 (type_specifier -> struct_specifier .)
    VOLATILE        reduce using rule 85 (type_specifier -> struct_specifier .)
    VOID            reduce using rule 85 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 85 (type_specifier -> struct_specifier .)
    SHORT           reduce using rule 85 (type_specifier -> struct_specifier .)
    INT             reduce using rule 85 (type_specifier -> struct_specifier .)
    LONG            reduce using rule 85 (type_specifier -> struct_specifier .)
    FLOAT           reduce using rule 85 (type_specifier -> struct_specifier .)
    DOUBLE          reduce using rule 85 (type_specifier -> struct_specifier .)
    SIGNED          reduce using rule 85 (type_specifier -> struct_specifier .)
    UNSIGNED        reduce using rule 85 (type_specifier -> struct_specifier .)
    TYPEID          reduce using rule 85 (type_specifier -> struct_specifier .)
    ENUM            reduce using rule 85 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 85 (type_specifier -> struct_specifier .)
    ID              reduce using rule 85 (type_specifier -> struct_specifier .)
    LPAREN          reduce using rule 85 (type_specifier -> struct_specifier .)
    TIMES           reduce using rule 85 (type_specifier -> struct_specifier .)


state 19

    (76) type_qualifier -> CONST .

    AUTO            reduce using rule 76 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 76 (type_qualifier -> CONST .)
    STATIC          reduce using rule 76 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 76 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 76 (type_qualifier -> CONST .)
    CONST           reduce using rule 76 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 76 (type_qualifier -> CONST .)
    VOID            reduce using rule 76 (type_qualifier -> CONST .)
    CHAR            reduce using rule 76 (type_qualifier -> CONST .)
    SHORT           reduce using rule 76 (type_qualifier -> CONST .)
    INT             reduce using rule 76 (type_qualifier -> CONST .)
    LONG            reduce using rule 76 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 76 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 76 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 76 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 76 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 76 (type_qualifier -> CONST .)
    ENUM            reduce using rule 76 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 76 (type_qualifier -> CONST .)
    ID              reduce using rule 76 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 76 (type_qualifier -> CONST .)
    TIMES           reduce using rule 76 (type_qualifier -> CONST .)
    PLUSPLUS        reduce using rule 76 (type_qualifier -> CONST .)
    MINUSMINUS      reduce using rule 76 (type_qualifier -> CONST .)
    AND             reduce using rule 76 (type_qualifier -> CONST .)
    PLUS            reduce using rule 76 (type_qualifier -> CONST .)
    MINUS           reduce using rule 76 (type_qualifier -> CONST .)
    NOT             reduce using rule 76 (type_qualifier -> CONST .)
    LNOT            reduce using rule 76 (type_qualifier -> CONST .)
    INT_CONST       reduce using rule 76 (type_qualifier -> CONST .)
    FLOAT_CONST     reduce using rule 76 (type_qualifier -> CONST .)
    CHAR_CONST      reduce using rule 76 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 76 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 76 (type_qualifier -> CONST .)


state 20

    (77) type_qualifier -> VOLATILE .

    AUTO            reduce using rule 77 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 77 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 77 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 77 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 77 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 77 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 77 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 77 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 77 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 77 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 77 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 77 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 77 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 77 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 77 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 77 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 77 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 77 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 77 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 77 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 77 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 77 (type_qualifier -> VOLATILE .)
    PLUSPLUS        reduce using rule 77 (type_qualifier -> VOLATILE .)
    MINUSMINUS      reduce using rule 77 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 77 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 77 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 77 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 77 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 77 (type_qualifier -> VOLATILE .)
    INT_CONST       reduce using rule 77 (type_qualifier -> VOLATILE .)
    FLOAT_CONST     reduce using rule 77 (type_qualifier -> VOLATILE .)
    CHAR_CONST      reduce using rule 77 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 77 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 77 (type_qualifier -> VOLATILE .)


state 21

    (86) type_specifier_simple -> VOID .

    AUTO            reduce using rule 86 (type_specifier_simple -> VOID .)
    REGISTER        reduce using rule 86 (type_specifier_simple -> VOID .)
    STATIC          reduce using rule 86 (type_specifier_simple -> VOID .)
    EXTERN          reduce using rule 86 (type_specifier_simple -> VOID .)
    TYPEDEF         reduce using rule 86 (type_specifier_simple -> VOID .)
    CONST           reduce using rule 86 (type_specifier_simple -> VOID .)
    VOLATILE        reduce using rule 86 (type_specifier_simple -> VOID .)
    VOID            reduce using rule 86 (type_specifier_simple -> VOID .)
    CHAR            reduce using rule 86 (type_specifier_simple -> VOID .)
    SHORT           reduce using rule 86 (type_specifier_simple -> VOID .)
    INT             reduce using rule 86 (type_specifier_simple -> VOID .)
    LONG            reduce using rule 86 (type_specifier_simple -> VOID .)
    FLOAT           reduce using rule 86 (type_specifier_simple -> VOID .)
    DOUBLE          reduce using rule 86 (type_specifier_simple -> VOID .)
    SIGNED          reduce using rule 86 (type_specifier_simple -> VOID .)
    UNSIGNED        reduce using rule 86 (type_specifier_simple -> VOID .)
    TYPEID          reduce using rule 86 (type_specifier_simple -> VOID .)
    ENUM            reduce using rule 86 (type_specifier_simple -> VOID .)
    STRUCT          reduce using rule 86 (type_specifier_simple -> VOID .)
    ID              reduce using rule 86 (type_specifier_simple -> VOID .)
    LPAREN          reduce using rule 86 (type_specifier_simple -> VOID .)
    TIMES           reduce using rule 86 (type_specifier_simple -> VOID .)


state 22

    (87) type_specifier_simple -> CHAR .

    AUTO            reduce using rule 87 (type_specifier_simple -> CHAR .)
    REGISTER        reduce using rule 87 (type_specifier_simple -> CHAR .)
    STATIC          reduce using rule 87 (type_specifier_simple -> CHAR .)
    EXTERN          reduce using rule 87 (type_specifier_simple -> CHAR .)
    TYPEDEF         reduce using rule 87 (type_specifier_simple -> CHAR .)
    CONST           reduce using rule 87 (type_specifier_simple -> CHAR .)
    VOLATILE        reduce using rule 87 (type_specifier_simple -> CHAR .)
    VOID            reduce using rule 87 (type_specifier_simple -> CHAR .)
    CHAR            reduce using rule 87 (type_specifier_simple -> CHAR .)
    SHORT           reduce using rule 87 (type_specifier_simple -> CHAR .)
    INT             reduce using rule 87 (type_specifier_simple -> CHAR .)
    LONG            reduce using rule 87 (type_specifier_simple -> CHAR .)
    FLOAT           reduce using rule 87 (type_specifier_simple -> CHAR .)
    DOUBLE          reduce using rule 87 (type_specifier_simple -> CHAR .)
    SIGNED          reduce using rule 87 (type_specifier_simple -> CHAR .)
    UNSIGNED        reduce using rule 87 (type_specifier_simple -> CHAR .)
    TYPEID          reduce using rule 87 (type_specifier_simple -> CHAR .)
    ENUM            reduce using rule 87 (type_specifier_simple -> CHAR .)
    STRUCT          reduce using rule 87 (type_specifier_simple -> CHAR .)
    ID              reduce using rule 87 (type_specifier_simple -> CHAR .)
    LPAREN          reduce using rule 87 (type_specifier_simple -> CHAR .)
    TIMES           reduce using rule 87 (type_specifier_simple -> CHAR .)


state 23

    (88) type_specifier_simple -> SHORT .

    AUTO            reduce using rule 88 (type_specifier_simple -> SHORT .)
    REGISTER        reduce using rule 88 (type_specifier_simple -> SHORT .)
    STATIC          reduce using rule 88 (type_specifier_simple -> SHORT .)
    EXTERN          reduce using rule 88 (type_specifier_simple -> SHORT .)
    TYPEDEF         reduce using rule 88 (type_specifier_simple -> SHORT .)
    CONST           reduce using rule 88 (type_specifier_simple -> SHORT .)
    VOLATILE        reduce using rule 88 (type_specifier_simple -> SHORT .)
    VOID            reduce using rule 88 (type_specifier_simple -> SHORT .)
    CHAR            reduce using rule 88 (type_specifier_simple -> SHORT .)
    SHORT           reduce using rule 88 (type_specifier_simple -> SHORT .)
    INT             reduce using rule 88 (type_specifier_simple -> SHORT .)
    LONG            reduce using rule 88 (type_specifier_simple -> SHORT .)
    FLOAT           reduce using rule 88 (type_specifier_simple -> SHORT .)
    DOUBLE          reduce using rule 88 (type_specifier_simple -> SHORT .)
    SIGNED          reduce using rule 88 (type_specifier_simple -> SHORT .)
    UNSIGNED        reduce using rule 88 (type_specifier_simple -> SHORT .)
    TYPEID          reduce using rule 88 (type_specifier_simple -> SHORT .)
    ENUM            reduce using rule 88 (type_specifier_simple -> SHORT .)
    STRUCT          reduce using rule 88 (type_specifier_simple -> SHORT .)
    ID              reduce using rule 88 (type_specifier_simple -> SHORT .)
    LPAREN          reduce using rule 88 (type_specifier_simple -> SHORT .)
    TIMES           reduce using rule 88 (type_specifier_simple -> SHORT .)


state 24

    (89) type_specifier_simple -> INT .

    AUTO            reduce using rule 89 (type_specifier_simple -> INT .)
    REGISTER        reduce using rule 89 (type_specifier_simple -> INT .)
    STATIC          reduce using rule 89 (type_specifier_simple -> INT .)
    EXTERN          reduce using rule 89 (type_specifier_simple -> INT .)
    TYPEDEF         reduce using rule 89 (type_specifier_simple -> INT .)
    CONST           reduce using rule 89 (type_specifier_simple -> INT .)
    VOLATILE        reduce using rule 89 (type_specifier_simple -> INT .)
    VOID            reduce using rule 89 (type_specifier_simple -> INT .)
    CHAR            reduce using rule 89 (type_specifier_simple -> INT .)
    SHORT           reduce using rule 89 (type_specifier_simple -> INT .)
    INT             reduce using rule 89 (type_specifier_simple -> INT .)
    LONG            reduce using rule 89 (type_specifier_simple -> INT .)
    FLOAT           reduce using rule 89 (type_specifier_simple -> INT .)
    DOUBLE          reduce using rule 89 (type_specifier_simple -> INT .)
    SIGNED          reduce using rule 89 (type_specifier_simple -> INT .)
    UNSIGNED        reduce using rule 89 (type_specifier_simple -> INT .)
    TYPEID          reduce using rule 89 (type_specifier_simple -> INT .)
    ENUM            reduce using rule 89 (type_specifier_simple -> INT .)
    STRUCT          reduce using rule 89 (type_specifier_simple -> INT .)
    ID              reduce using rule 89 (type_specifier_simple -> INT .)
    LPAREN          reduce using rule 89 (type_specifier_simple -> INT .)
    TIMES           reduce using rule 89 (type_specifier_simple -> INT .)


state 25

    (90) type_specifier_simple -> LONG .

    AUTO            reduce using rule 90 (type_specifier_simple -> LONG .)
    REGISTER        reduce using rule 90 (type_specifier_simple -> LONG .)
    STATIC          reduce using rule 90 (type_specifier_simple -> LONG .)
    EXTERN          reduce using rule 90 (type_specifier_simple -> LONG .)
    TYPEDEF         reduce using rule 90 (type_specifier_simple -> LONG .)
    CONST           reduce using rule 90 (type_specifier_simple -> LONG .)
    VOLATILE        reduce using rule 90 (type_specifier_simple -> LONG .)
    VOID            reduce using rule 90 (type_specifier_simple -> LONG .)
    CHAR            reduce using rule 90 (type_specifier_simple -> LONG .)
    SHORT           reduce using rule 90 (type_specifier_simple -> LONG .)
    INT             reduce using rule 90 (type_specifier_simple -> LONG .)
    LONG            reduce using rule 90 (type_specifier_simple -> LONG .)
    FLOAT           reduce using rule 90 (type_specifier_simple -> LONG .)
    DOUBLE          reduce using rule 90 (type_specifier_simple -> LONG .)
    SIGNED          reduce using rule 90 (type_specifier_simple -> LONG .)
    UNSIGNED        reduce using rule 90 (type_specifier_simple -> LONG .)
    TYPEID          reduce using rule 90 (type_specifier_simple -> LONG .)
    ENUM            reduce using rule 90 (type_specifier_simple -> LONG .)
    STRUCT          reduce using rule 90 (type_specifier_simple -> LONG .)
    ID              reduce using rule 90 (type_specifier_simple -> LONG .)
    LPAREN          reduce using rule 90 (type_specifier_simple -> LONG .)
    TIMES           reduce using rule 90 (type_specifier_simple -> LONG .)


state 26

    (91) type_specifier_simple -> FLOAT .

    AUTO            reduce using rule 91 (type_specifier_simple -> FLOAT .)
    REGISTER        reduce using rule 91 (type_specifier_simple -> FLOAT .)
    STATIC          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    EXTERN          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    TYPEDEF         reduce using rule 91 (type_specifier_simple -> FLOAT .)
    CONST           reduce using rule 91 (type_specifier_simple -> FLOAT .)
    VOLATILE        reduce using rule 91 (type_specifier_simple -> FLOAT .)
    VOID            reduce using rule 91 (type_specifier_simple -> FLOAT .)
    CHAR            reduce using rule 91 (type_specifier_simple -> FLOAT .)
    SHORT           reduce using rule 91 (type_specifier_simple -> FLOAT .)
    INT             reduce using rule 91 (type_specifier_simple -> FLOAT .)
    LONG            reduce using rule 91 (type_specifier_simple -> FLOAT .)
    FLOAT           reduce using rule 91 (type_specifier_simple -> FLOAT .)
    DOUBLE          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    SIGNED          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    UNSIGNED        reduce using rule 91 (type_specifier_simple -> FLOAT .)
    TYPEID          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    ENUM            reduce using rule 91 (type_specifier_simple -> FLOAT .)
    STRUCT          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    ID              reduce using rule 91 (type_specifier_simple -> FLOAT .)
    LPAREN          reduce using rule 91 (type_specifier_simple -> FLOAT .)
    TIMES           reduce using rule 91 (type_specifier_simple -> FLOAT .)


state 27

    (92) type_specifier_simple -> DOUBLE .

    AUTO            reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    REGISTER        reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    STATIC          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    EXTERN          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    TYPEDEF         reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    CONST           reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    VOLATILE        reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    VOID            reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    CHAR            reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    SHORT           reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    INT             reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    LONG            reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    FLOAT           reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    DOUBLE          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    SIGNED          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    UNSIGNED        reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    TYPEID          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    ENUM            reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    STRUCT          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    ID              reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    LPAREN          reduce using rule 92 (type_specifier_simple -> DOUBLE .)
    TIMES           reduce using rule 92 (type_specifier_simple -> DOUBLE .)


state 28

    (93) type_specifier_simple -> SIGNED .

    AUTO            reduce using rule 93 (type_specifier_simple -> SIGNED .)
    REGISTER        reduce using rule 93 (type_specifier_simple -> SIGNED .)
    STATIC          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    EXTERN          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    TYPEDEF         reduce using rule 93 (type_specifier_simple -> SIGNED .)
    CONST           reduce using rule 93 (type_specifier_simple -> SIGNED .)
    VOLATILE        reduce using rule 93 (type_specifier_simple -> SIGNED .)
    VOID            reduce using rule 93 (type_specifier_simple -> SIGNED .)
    CHAR            reduce using rule 93 (type_specifier_simple -> SIGNED .)
    SHORT           reduce using rule 93 (type_specifier_simple -> SIGNED .)
    INT             reduce using rule 93 (type_specifier_simple -> SIGNED .)
    LONG            reduce using rule 93 (type_specifier_simple -> SIGNED .)
    FLOAT           reduce using rule 93 (type_specifier_simple -> SIGNED .)
    DOUBLE          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    SIGNED          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    UNSIGNED        reduce using rule 93 (type_specifier_simple -> SIGNED .)
    TYPEID          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    ENUM            reduce using rule 93 (type_specifier_simple -> SIGNED .)
    STRUCT          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    ID              reduce using rule 93 (type_specifier_simple -> SIGNED .)
    LPAREN          reduce using rule 93 (type_specifier_simple -> SIGNED .)
    TIMES           reduce using rule 93 (type_specifier_simple -> SIGNED .)


state 29

    (94) type_specifier_simple -> UNSIGNED .

    AUTO            reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    REGISTER        reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    STATIC          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    EXTERN          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    TYPEDEF         reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    CONST           reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    VOLATILE        reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    VOID            reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    CHAR            reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    SHORT           reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    INT             reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    LONG            reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    FLOAT           reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    DOUBLE          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    SIGNED          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    UNSIGNED        reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    TYPEID          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    ENUM            reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    STRUCT          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    ID              reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    LPAREN          reduce using rule 94 (type_specifier_simple -> UNSIGNED .)
    TIMES           reduce using rule 94 (type_specifier_simple -> UNSIGNED .)


state 30

    (95) type_specifier_simple -> TYPEID .

    AUTO            reduce using rule 95 (type_specifier_simple -> TYPEID .)
    REGISTER        reduce using rule 95 (type_specifier_simple -> TYPEID .)
    STATIC          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    EXTERN          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    TYPEDEF         reduce using rule 95 (type_specifier_simple -> TYPEID .)
    CONST           reduce using rule 95 (type_specifier_simple -> TYPEID .)
    VOLATILE        reduce using rule 95 (type_specifier_simple -> TYPEID .)
    VOID            reduce using rule 95 (type_specifier_simple -> TYPEID .)
    CHAR            reduce using rule 95 (type_specifier_simple -> TYPEID .)
    SHORT           reduce using rule 95 (type_specifier_simple -> TYPEID .)
    INT             reduce using rule 95 (type_specifier_simple -> TYPEID .)
    LONG            reduce using rule 95 (type_specifier_simple -> TYPEID .)
    FLOAT           reduce using rule 95 (type_specifier_simple -> TYPEID .)
    DOUBLE          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    SIGNED          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    UNSIGNED        reduce using rule 95 (type_specifier_simple -> TYPEID .)
    TYPEID          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    ENUM            reduce using rule 95 (type_specifier_simple -> TYPEID .)
    STRUCT          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    ID              reduce using rule 95 (type_specifier_simple -> TYPEID .)
    LPAREN          reduce using rule 95 (type_specifier_simple -> TYPEID .)
    TIMES           reduce using rule 95 (type_specifier_simple -> TYPEID .)


state 31

    (96) enum_specifier -> ENUM . ID
    (97) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (98) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (189) brace_open -> . LBRACE

    ID              shift and go to state 47
    LBRACE          shift and go to state 49

    brace_open                     shift and go to state 48

state 32

    (104) struct_specifier -> STRUCT . ID
    (105) struct_specifier -> STRUCT . brace_open struct_declaration_list brace_close
    (106) struct_specifier -> STRUCT . ID brace_open struct_declaration_list brace_close
    (189) brace_open -> . LBRACE

    ID              shift and go to state 50
    LBRACE          shift and go to state 49

    brace_open                     shift and go to state 51

state 33

    (22) translation_unit -> translation_unit external_declaration .

    AUTO            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 22 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 22 (translation_unit -> translation_unit external_declaration .)


state 34

    (25) function_defination -> declaration_specifiers declarator . declaration_list_opt compound_statement
    (52) init_declarator -> declarator .
    (53) init_declarator -> declarator . EQUALS initializer
    (5) declaration_list_opt -> . empty
    (6) declaration_list_opt -> . declaration_list
    (191) empty -> .
    (26) declaration_list -> . declaration
    (27) declaration_list -> . declaration_list declaration
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    SEMI            reduce using rule 52 (init_declarator -> declarator .)
    COMMA           reduce using rule 52 (init_declarator -> declarator .)
    EQUALS          shift and go to state 54
    LBRACE          reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    declaration_specifiers         shift and go to state 52
    declaration_list_opt           shift and go to state 53
    empty                          shift and go to state 55
    declaration_list               shift and go to state 56
    declaration                    shift and go to state 57
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 35

    (49) declaration -> declaration_specifiers init_declarator_list . SEMI
    (51) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 58
    COMMA           shift and go to state 59


state 36

    (54) declarator -> direct_declarator .
    (58) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN

    EQUALS          reduce using rule 54 (declarator -> direct_declarator .)
    AUTO            reduce using rule 54 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 54 (declarator -> direct_declarator .)
    STATIC          reduce using rule 54 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 54 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 54 (declarator -> direct_declarator .)
    CONST           reduce using rule 54 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 54 (declarator -> direct_declarator .)
    VOID            reduce using rule 54 (declarator -> direct_declarator .)
    CHAR            reduce using rule 54 (declarator -> direct_declarator .)
    SHORT           reduce using rule 54 (declarator -> direct_declarator .)
    INT             reduce using rule 54 (declarator -> direct_declarator .)
    LONG            reduce using rule 54 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 54 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 54 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 54 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 54 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 54 (declarator -> direct_declarator .)
    ENUM            reduce using rule 54 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 54 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 54 (declarator -> direct_declarator .)
    SEMI            reduce using rule 54 (declarator -> direct_declarator .)
    COMMA           reduce using rule 54 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 54 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 60
    LPAREN          shift and go to state 61


state 37

    (55) declarator -> pointer . direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN

    ID              shift and go to state 39
    LPAREN          shift and go to state 40

    direct_declarator              shift and go to state 62

state 38

    (50) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 50 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 50 (init_declarator_list -> init_declarator .)


state 39

    (56) direct_declarator -> ID .

    LBRACKET        reduce using rule 56 (direct_declarator -> ID .)
    LPAREN          reduce using rule 56 (direct_declarator -> ID .)
    EQUALS          reduce using rule 56 (direct_declarator -> ID .)
    AUTO            reduce using rule 56 (direct_declarator -> ID .)
    REGISTER        reduce using rule 56 (direct_declarator -> ID .)
    STATIC          reduce using rule 56 (direct_declarator -> ID .)
    EXTERN          reduce using rule 56 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 56 (direct_declarator -> ID .)
    CONST           reduce using rule 56 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 56 (direct_declarator -> ID .)
    VOID            reduce using rule 56 (direct_declarator -> ID .)
    CHAR            reduce using rule 56 (direct_declarator -> ID .)
    SHORT           reduce using rule 56 (direct_declarator -> ID .)
    INT             reduce using rule 56 (direct_declarator -> ID .)
    LONG            reduce using rule 56 (direct_declarator -> ID .)
    FLOAT           reduce using rule 56 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 56 (direct_declarator -> ID .)
    SIGNED          reduce using rule 56 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 56 (direct_declarator -> ID .)
    TYPEID          reduce using rule 56 (direct_declarator -> ID .)
    ENUM            reduce using rule 56 (direct_declarator -> ID .)
    STRUCT          reduce using rule 56 (direct_declarator -> ID .)
    LBRACE          reduce using rule 56 (direct_declarator -> ID .)
    SEMI            reduce using rule 56 (direct_declarator -> ID .)
    COMMA           reduce using rule 56 (direct_declarator -> ID .)
    RPAREN          reduce using rule 56 (direct_declarator -> ID .)


state 40

    (57) direct_declarator -> LPAREN . declarator RPAREN
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    declarator                     shift and go to state 63
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 41

    (72) pointer -> TIMES . type_qualifier_list_opt
    (73) pointer -> TIMES . type_qualifier_list_opt pointer
    (17) type_qualifier_list_opt -> . empty
    (18) type_qualifier_list_opt -> . type_qualifier_list
    (191) empty -> .
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 191 (empty -> .)
    ID              reduce using rule 191 (empty -> .)
    LPAREN          reduce using rule 191 (empty -> .)
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    type_qualifier_list_opt        shift and go to state 64
    empty                          shift and go to state 65
    type_qualifier_list            shift and go to state 66
    type_qualifier                 shift and go to state 67

state 42

    (69) declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .

    ID              reduce using rule 69 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 69 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 69 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)


state 43

    (7) declaration_specifiers_opt -> empty .

    ID              reduce using rule 7 (declaration_specifiers_opt -> empty .)
    LPAREN          reduce using rule 7 (declaration_specifiers_opt -> empty .)
    TIMES           reduce using rule 7 (declaration_specifiers_opt -> empty .)


state 44

    (8) declaration_specifiers_opt -> declaration_specifiers .

    ID              reduce using rule 8 (declaration_specifiers_opt -> declaration_specifiers .)
    LPAREN          reduce using rule 8 (declaration_specifiers_opt -> declaration_specifiers .)
    TIMES           reduce using rule 8 (declaration_specifiers_opt -> declaration_specifiers .)


state 45

    (70) declaration_specifiers -> type_specifier declaration_specifiers_opt .

    ID              reduce using rule 70 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 70 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 70 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)


state 46

    (71) declaration_specifiers -> type_qualifier declaration_specifiers_opt .

    ID              reduce using rule 71 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 71 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    TIMES           reduce using rule 71 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)


state 47

    (96) enum_specifier -> ENUM ID .
    (98) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (189) brace_open -> . LBRACE

    AUTO            reduce using rule 96 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 96 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 96 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 96 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 96 (enum_specifier -> ENUM ID .)
    CONST           reduce using rule 96 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 96 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 96 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 96 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 96 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 96 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 96 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 96 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 96 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 96 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 96 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 96 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 96 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 96 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 96 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 96 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 96 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 49

    brace_open                     shift and go to state 68

state 48

    (97) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (99) enumerator_list -> . enumerator
    (100) enumerator_list -> . enumerator_list COMMA
    (101) enumerator_list -> . enumerator_list COMMA enumerator
    (102) enumerator -> . ID
    (103) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 71

    enumerator_list                shift and go to state 69
    enumerator                     shift and go to state 70

state 49

    (189) brace_open -> LBRACE .

    ID              reduce using rule 189 (brace_open -> LBRACE .)
    VOID            reduce using rule 189 (brace_open -> LBRACE .)
    CHAR            reduce using rule 189 (brace_open -> LBRACE .)
    SHORT           reduce using rule 189 (brace_open -> LBRACE .)
    INT             reduce using rule 189 (brace_open -> LBRACE .)
    LONG            reduce using rule 189 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 189 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 189 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 189 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 189 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 189 (brace_open -> LBRACE .)
    ENUM            reduce using rule 189 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 189 (brace_open -> LBRACE .)
    CONST           reduce using rule 189 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 189 (brace_open -> LBRACE .)
    IF              reduce using rule 189 (brace_open -> LBRACE .)
    WHILE           reduce using rule 189 (brace_open -> LBRACE .)
    DO              reduce using rule 189 (brace_open -> LBRACE .)
    FOR             reduce using rule 189 (brace_open -> LBRACE .)
    BREAK           reduce using rule 189 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 189 (brace_open -> LBRACE .)
    RETURN          reduce using rule 189 (brace_open -> LBRACE .)
    AUTO            reduce using rule 189 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 189 (brace_open -> LBRACE .)
    STATIC          reduce using rule 189 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 189 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 189 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 189 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 189 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 189 (brace_open -> LBRACE .)
    AND             reduce using rule 189 (brace_open -> LBRACE .)
    TIMES           reduce using rule 189 (brace_open -> LBRACE .)
    PLUS            reduce using rule 189 (brace_open -> LBRACE .)
    MINUS           reduce using rule 189 (brace_open -> LBRACE .)
    NOT             reduce using rule 189 (brace_open -> LBRACE .)
    LNOT            reduce using rule 189 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 189 (brace_open -> LBRACE .)
    INT_CONST       reduce using rule 189 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 189 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 189 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 189 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 189 (brace_open -> LBRACE .)
    SEMI            reduce using rule 189 (brace_open -> LBRACE .)


state 50

    (104) struct_specifier -> STRUCT ID .
    (106) struct_specifier -> STRUCT ID . brace_open struct_declaration_list brace_close
    (189) brace_open -> . LBRACE

    AUTO            reduce using rule 104 (struct_specifier -> STRUCT ID .)
    REGISTER        reduce using rule 104 (struct_specifier -> STRUCT ID .)
    STATIC          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    EXTERN          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    TYPEDEF         reduce using rule 104 (struct_specifier -> STRUCT ID .)
    CONST           reduce using rule 104 (struct_specifier -> STRUCT ID .)
    VOLATILE        reduce using rule 104 (struct_specifier -> STRUCT ID .)
    VOID            reduce using rule 104 (struct_specifier -> STRUCT ID .)
    CHAR            reduce using rule 104 (struct_specifier -> STRUCT ID .)
    SHORT           reduce using rule 104 (struct_specifier -> STRUCT ID .)
    INT             reduce using rule 104 (struct_specifier -> STRUCT ID .)
    LONG            reduce using rule 104 (struct_specifier -> STRUCT ID .)
    FLOAT           reduce using rule 104 (struct_specifier -> STRUCT ID .)
    DOUBLE          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    SIGNED          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    UNSIGNED        reduce using rule 104 (struct_specifier -> STRUCT ID .)
    TYPEID          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    ENUM            reduce using rule 104 (struct_specifier -> STRUCT ID .)
    STRUCT          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    ID              reduce using rule 104 (struct_specifier -> STRUCT ID .)
    LPAREN          reduce using rule 104 (struct_specifier -> STRUCT ID .)
    TIMES           reduce using rule 104 (struct_specifier -> STRUCT ID .)
    LBRACE          shift and go to state 49

    brace_open                     shift and go to state 72

state 51

    (105) struct_specifier -> STRUCT brace_open . struct_declaration_list brace_close
    (107) struct_declaration_list -> . struct_declaration
    (108) struct_declaration_list -> . struct_declaration_list struct_declaration
    (109) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (110) specifier_qualifier_list -> . specifier_qualifier_list type_specifier
    (111) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    struct_declaration_list        shift and go to state 73
    struct_declaration             shift and go to state 74
    specifier_qualifier_list       shift and go to state 75
    type_specifier                 shift and go to state 76
    type_qualifier                 shift and go to state 67
    type_qualifier_list            shift and go to state 77
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 52

    (49) declaration -> declaration_specifiers . init_declarator_list SEMI
    (50) init_declarator_list -> . init_declarator
    (51) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (52) init_declarator -> . declarator
    (53) init_declarator -> . declarator EQUALS initializer
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    init_declarator_list           shift and go to state 35
    init_declarator                shift and go to state 38
    declarator                     shift and go to state 78
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 53

    (25) function_defination -> declaration_specifiers declarator declaration_list_opt . compound_statement
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (189) brace_open -> . LBRACE

    LBRACE          shift and go to state 49

    compound_statement             shift and go to state 79
    brace_open                     shift and go to state 80

state 54

    (53) init_declarator -> declarator EQUALS . initializer
    (117) initializer -> . assignment_expression
    (118) initializer -> . brace_open initializer_list_opt brace_close
    (119) initializer -> . brace_open initializer_list COMMA brace_close
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (189) brace_open -> . LBRACE
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    LBRACE          shift and go to state 49
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    initializer                    shift and go to state 81
    assignment_expression          shift and go to state 82
    brace_open                     shift and go to state 83
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 55

    (5) declaration_list_opt -> empty .

    LBRACE          reduce using rule 5 (declaration_list_opt -> empty .)


state 56

    (6) declaration_list_opt -> declaration_list .
    (27) declaration_list -> declaration_list . declaration
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    LBRACE          reduce using rule 6 (declaration_list_opt -> declaration_list .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    declaration                    shift and go to state 108
    declaration_specifiers         shift and go to state 52
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 57

    (26) declaration_list -> declaration .

    AUTO            reduce using rule 26 (declaration_list -> declaration .)
    REGISTER        reduce using rule 26 (declaration_list -> declaration .)
    STATIC          reduce using rule 26 (declaration_list -> declaration .)
    EXTERN          reduce using rule 26 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 26 (declaration_list -> declaration .)
    CONST           reduce using rule 26 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 26 (declaration_list -> declaration .)
    VOID            reduce using rule 26 (declaration_list -> declaration .)
    CHAR            reduce using rule 26 (declaration_list -> declaration .)
    SHORT           reduce using rule 26 (declaration_list -> declaration .)
    INT             reduce using rule 26 (declaration_list -> declaration .)
    LONG            reduce using rule 26 (declaration_list -> declaration .)
    FLOAT           reduce using rule 26 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 26 (declaration_list -> declaration .)
    SIGNED          reduce using rule 26 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 26 (declaration_list -> declaration .)
    TYPEID          reduce using rule 26 (declaration_list -> declaration .)
    ENUM            reduce using rule 26 (declaration_list -> declaration .)
    STRUCT          reduce using rule 26 (declaration_list -> declaration .)
    LBRACE          reduce using rule 26 (declaration_list -> declaration .)


state 58

    (49) declaration -> declaration_specifiers init_declarator_list SEMI .

    AUTO            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    REGISTER        reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STATIC          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    EXTERN          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEDEF         reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONST           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOLATILE        reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    VOID            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SHORT           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT             reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LONG            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DOUBLE          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SIGNED          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    UNSIGNED        reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TYPEID          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ENUM            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRUCT          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    $end            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LBRACE          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    IF              reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    WHILE           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    DO              reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FOR             reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    BREAK           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CONTINUE        reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RETURN          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUSPLUS        reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUSMINUS      reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    AND             reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    TIMES           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    PLUS            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    MINUS           reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    NOT             reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LNOT            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    LPAREN          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    ID              reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    INT_CONST       reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    FLOAT_CONST     reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    CHAR_CONST      reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    STRING_LITERAL  reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    SEMI            reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)
    RBRACE          reduce using rule 49 (declaration -> declaration_specifiers init_declarator_list SEMI .)


state 59

    (51) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (52) init_declarator -> . declarator
    (53) init_declarator -> . declarator EQUALS initializer
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    init_declarator                shift and go to state 109
    declarator                     shift and go to state 78
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 60

    (58) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> direct_declarator LBRACKET . STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (17) type_qualifier_list_opt -> . empty
    (18) type_qualifier_list_opt -> . type_qualifier_list
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (191) empty -> .
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 111
    PLUSPLUS        reduce using rule 191 (empty -> .)
    MINUSMINUS      reduce using rule 191 (empty -> .)
    AND             reduce using rule 191 (empty -> .)
    TIMES           reduce using rule 191 (empty -> .)
    PLUS            reduce using rule 191 (empty -> .)
    MINUS           reduce using rule 191 (empty -> .)
    NOT             reduce using rule 191 (empty -> .)
    LNOT            reduce using rule 191 (empty -> .)
    LPAREN          reduce using rule 191 (empty -> .)
    ID              reduce using rule 191 (empty -> .)
    INT_CONST       reduce using rule 191 (empty -> .)
    FLOAT_CONST     reduce using rule 191 (empty -> .)
    CHAR_CONST      reduce using rule 191 (empty -> .)
    STRING_LITERAL  reduce using rule 191 (empty -> .)
    RBRACKET        reduce using rule 191 (empty -> .)
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    type_qualifier_list_opt        shift and go to state 110
    type_qualifier_list            shift and go to state 112
    empty                          shift and go to state 65
    type_qualifier                 shift and go to state 67

state 61

    (61) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (62) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (11) identifier_list_opt -> . empty
    (12) identifier_list_opt -> . identifier_list
    (65) parameter_type_list -> . parameter_list
    (191) empty -> .
    (63) identifier_list -> . identifier
    (64) identifier_list -> . identifier_list COMMA identifier
    (66) parameter_list -> . parameter_declaration
    (67) parameter_list -> . parameter_list COMMA parameter_declaration
    (184) identifier -> . ID
    (68) parameter_declaration -> . declaration_specifiers declarator
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    RPAREN          reduce using rule 191 (empty -> .)
    ID              shift and go to state 103
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    identifier_list_opt            shift and go to state 113
    parameter_type_list            shift and go to state 114
    empty                          shift and go to state 115
    identifier_list                shift and go to state 116
    parameter_list                 shift and go to state 117
    identifier                     shift and go to state 118
    parameter_declaration          shift and go to state 119
    declaration_specifiers         shift and go to state 120
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 62

    (55) declarator -> pointer direct_declarator .
    (58) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN

    EQUALS          reduce using rule 55 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 55 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 55 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 55 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 55 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 55 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 55 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 55 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 55 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 55 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 55 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 55 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 55 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 55 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 55 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 55 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 55 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 55 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 55 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 55 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 55 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 55 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 55 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 55 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 60
    LPAREN          shift and go to state 61


state 63

    (57) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 121


state 64

    (72) pointer -> TIMES type_qualifier_list_opt .
    (73) pointer -> TIMES type_qualifier_list_opt . pointer
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              reduce using rule 72 (pointer -> TIMES type_qualifier_list_opt .)
    LPAREN          reduce using rule 72 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 41

    pointer                        shift and go to state 122

state 65

    (17) type_qualifier_list_opt -> empty .

    TIMES           reduce using rule 17 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 17 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 17 (type_qualifier_list_opt -> empty .)
    PLUSPLUS        reduce using rule 17 (type_qualifier_list_opt -> empty .)
    MINUSMINUS      reduce using rule 17 (type_qualifier_list_opt -> empty .)
    AND             reduce using rule 17 (type_qualifier_list_opt -> empty .)
    PLUS            reduce using rule 17 (type_qualifier_list_opt -> empty .)
    MINUS           reduce using rule 17 (type_qualifier_list_opt -> empty .)
    NOT             reduce using rule 17 (type_qualifier_list_opt -> empty .)
    LNOT            reduce using rule 17 (type_qualifier_list_opt -> empty .)
    INT_CONST       reduce using rule 17 (type_qualifier_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 17 (type_qualifier_list_opt -> empty .)
    CHAR_CONST      reduce using rule 17 (type_qualifier_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 17 (type_qualifier_list_opt -> empty .)
    RBRACKET        reduce using rule 17 (type_qualifier_list_opt -> empty .)


state 66

    (18) type_qualifier_list_opt -> type_qualifier_list .
    (75) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    type_qualifier                 shift and go to state 123

state 67

    (74) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    VOID            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    CHAR            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    SHORT           reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    INT             reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    LONG            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    FLOAT           reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    DOUBLE          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    SIGNED          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    UNSIGNED        reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    TYPEID          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    ENUM            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    STRUCT          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    PLUSPLUS        reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    MINUSMINUS      reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    AND             reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    INT_CONST       reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    FLOAT_CONST     reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    CHAR_CONST      reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 74 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 74 (type_qualifier_list -> type_qualifier .)


state 68

    (98) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (99) enumerator_list -> . enumerator
    (100) enumerator_list -> . enumerator_list COMMA
    (101) enumerator_list -> . enumerator_list COMMA enumerator
    (102) enumerator -> . ID
    (103) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 71

    enumerator_list                shift and go to state 124
    enumerator                     shift and go to state 70

state 69

    (97) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (100) enumerator_list -> enumerator_list . COMMA
    (101) enumerator_list -> enumerator_list . COMMA enumerator
    (190) brace_close -> . RBRACE

    COMMA           shift and go to state 126
    RBRACE          shift and go to state 127

    brace_close                    shift and go to state 125

state 70

    (99) enumerator_list -> enumerator .

    COMMA           reduce using rule 99 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 99 (enumerator_list -> enumerator .)


state 71

    (102) enumerator -> ID .
    (103) enumerator -> ID . EQUALS constant_expression

    COMMA           reduce using rule 102 (enumerator -> ID .)
    RBRACE          reduce using rule 102 (enumerator -> ID .)
    EQUALS          shift and go to state 128


state 72

    (106) struct_specifier -> STRUCT ID brace_open . struct_declaration_list brace_close
    (107) struct_declaration_list -> . struct_declaration
    (108) struct_declaration_list -> . struct_declaration_list struct_declaration
    (109) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (110) specifier_qualifier_list -> . specifier_qualifier_list type_specifier
    (111) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    struct_declaration_list        shift and go to state 129
    struct_declaration             shift and go to state 74
    specifier_qualifier_list       shift and go to state 75
    type_specifier                 shift and go to state 76
    type_qualifier                 shift and go to state 67
    type_qualifier_list            shift and go to state 77
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 73

    (105) struct_specifier -> STRUCT brace_open struct_declaration_list . brace_close
    (108) struct_declaration_list -> struct_declaration_list . struct_declaration
    (190) brace_close -> . RBRACE
    (109) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (110) specifier_qualifier_list -> . specifier_qualifier_list type_specifier
    (111) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    RBRACE          shift and go to state 127
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    brace_close                    shift and go to state 130
    struct_declaration             shift and go to state 131
    specifier_qualifier_list       shift and go to state 75
    type_specifier                 shift and go to state 76
    type_qualifier                 shift and go to state 67
    type_qualifier_list            shift and go to state 77
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 74

    (107) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 107 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 107 (struct_declaration_list -> struct_declaration .)


state 75

    (109) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI
    (110) specifier_qualifier_list -> specifier_qualifier_list . type_specifier
    (111) specifier_qualifier_list -> specifier_qualifier_list . type_qualifier
    (114) struct_declarator_list -> . struct_declarator
    (115) struct_declarator_list -> . struct_declarator COMMA struct_declarator
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (116) struct_declarator -> . declarator
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    struct_declarator_list         shift and go to state 132
    type_specifier                 shift and go to state 133
    type_qualifier                 shift and go to state 134
    struct_declarator              shift and go to state 135
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18
    declarator                     shift and go to state 136
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 76

    (112) specifier_qualifier_list -> type_specifier .

    CONST           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    VOLATILE        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    VOID            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    CHAR            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    SHORT           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    INT             reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LONG            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    FLOAT           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    DOUBLE          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    SIGNED          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    UNSIGNED        reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    TYPEID          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ENUM            reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    STRUCT          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    LPAREN          reduce using rule 112 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 112 (specifier_qualifier_list -> type_specifier .)


state 77

    (113) specifier_qualifier_list -> type_qualifier_list . type_specifier
    (75) type_qualifier_list -> type_qualifier_list . type_qualifier
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    type_specifier                 shift and go to state 137
    type_qualifier                 shift and go to state 123
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 78

    (52) init_declarator -> declarator .
    (53) init_declarator -> declarator . EQUALS initializer

    SEMI            reduce using rule 52 (init_declarator -> declarator .)
    COMMA           reduce using rule 52 (init_declarator -> declarator .)
    EQUALS          shift and go to state 54


state 79

    (25) function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .

    AUTO            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 25 (function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement .)


state 80

    (33) compound_statement -> brace_open . block_item_list_opt brace_close
    (3) block_item_list_opt -> . empty
    (4) block_item_list_opt -> . block_item_list
    (191) empty -> .
    (34) block_item_list -> . block_item
    (35) block_item_list -> . block_item_list block_item
    (36) block_item -> . declaration
    (37) block_item -> . statement
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RBRACE          reduce using rule 191 (empty -> .)
    SEMI            reduce using rule 191 (empty -> .)
    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    LBRACE          shift and go to state 49
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    brace_open                     shift and go to state 80
    block_item_list_opt            shift and go to state 138
    empty                          shift and go to state 139
    block_item_list                shift and go to state 140
    block_item                     shift and go to state 141
    declaration                    shift and go to state 142
    statement                      shift and go to state 143
    declaration_specifiers         shift and go to state 52
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    expression_opt                 shift and go to state 149
    expression                     shift and go to state 151
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 81

    (53) init_declarator -> declarator EQUALS initializer .

    SEMI            reduce using rule 53 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 53 (init_declarator -> declarator EQUALS initializer .)


state 82

    (117) initializer -> assignment_expression .

    SEMI            reduce using rule 117 (initializer -> assignment_expression .)
    COMMA           reduce using rule 117 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 117 (initializer -> assignment_expression .)


state 83

    (118) initializer -> brace_open . initializer_list_opt brace_close
    (119) initializer -> brace_open . initializer_list COMMA brace_close
    (15) initializer_list_opt -> . empty
    (16) initializer_list_opt -> . initializer_list
    (120) initializer_list -> . initializer
    (121) initializer_list -> . initializer_list COMMA initializer
    (191) empty -> .
    (117) initializer -> . assignment_expression
    (118) initializer -> . brace_open initializer_list_opt brace_close
    (119) initializer -> . brace_open initializer_list COMMA brace_close
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (189) brace_open -> . LBRACE
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RBRACE          reduce using rule 191 (empty -> .)
    LBRACE          shift and go to state 49
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    brace_open                     shift and go to state 83
    initializer_list_opt           shift and go to state 159
    initializer_list               shift and go to state 160
    empty                          shift and go to state 161
    initializer                    shift and go to state 162
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 84

    (125) assignment_expression -> conditional_expression .

    SEMI            reduce using rule 125 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 125 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 125 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 125 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 125 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 125 (assignment_expression -> conditional_expression .)


state 85

    (126) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (159) cast_expression -> unary_expression .
    (127) assignment_operator -> . EQUALS
    (128) assignment_operator -> . XOREQUAL
    (129) assignment_operator -> . TIMESEQUAL
    (130) assignment_operator -> . DIVEQUAL
    (131) assignment_operator -> . MODEQUAL
    (132) assignment_operator -> . PLUSEQUAL
    (133) assignment_operator -> . MINUSEQUAL
    (134) assignment_operator -> . LSHIFTEQUAL
    (135) assignment_operator -> . RSHIFTEQUAL
    (136) assignment_operator -> . ANDEQUAL
    (137) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 159 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 159 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 159 (cast_expression -> unary_expression .)
    MOD             reduce using rule 159 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 159 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 159 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 159 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 159 (cast_expression -> unary_expression .)
    GT              reduce using rule 159 (cast_expression -> unary_expression .)
    GE              reduce using rule 159 (cast_expression -> unary_expression .)
    LT              reduce using rule 159 (cast_expression -> unary_expression .)
    LE              reduce using rule 159 (cast_expression -> unary_expression .)
    EQ              reduce using rule 159 (cast_expression -> unary_expression .)
    NE              reduce using rule 159 (cast_expression -> unary_expression .)
    AND             reduce using rule 159 (cast_expression -> unary_expression .)
    XOR             reduce using rule 159 (cast_expression -> unary_expression .)
    OR              reduce using rule 159 (cast_expression -> unary_expression .)
    LAND            reduce using rule 159 (cast_expression -> unary_expression .)
    LOR             reduce using rule 159 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 159 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 159 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 159 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 159 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 159 (cast_expression -> unary_expression .)
    COLON           reduce using rule 159 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 164
    XOREQUAL        shift and go to state 165
    TIMESEQUAL      shift and go to state 166
    DIVEQUAL        shift and go to state 167
    MODEQUAL        shift and go to state 168
    PLUSEQUAL       shift and go to state 169
    MINUSEQUAL      shift and go to state 170
    LSHIFTEQUAL     shift and go to state 171
    RSHIFTEQUAL     shift and go to state 172
    ANDEQUAL        shift and go to state 173
    OREQUAL         shift and go to state 174

    assignment_operator            shift and go to state 163

state 86

    (138) conditional_expression -> binary_expression .
    (139) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    SEMI            reduce using rule 138 (conditional_expression -> binary_expression .)
    COMMA           reduce using rule 138 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 138 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 138 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 138 (conditional_expression -> binary_expression .)
    COLON           reduce using rule 138 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 175
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188
    AND             shift and go to state 189
    XOR             shift and go to state 190
    OR              shift and go to state 191
    LAND            shift and go to state 192
    LOR             shift and go to state 193


state 87

    (160) unary_expression -> postfix_expression .
    (173) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (174) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> postfix_expression . LPAREN RPAREN
    (176) postfix_expression -> postfix_expression . PERIOD identifier
    (177) postfix_expression -> postfix_expression . ARROW identifier
    (178) postfix_expression -> postfix_expression . PLUSPLUS
    (179) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 160 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 160 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 160 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 160 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 160 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 160 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 160 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 160 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 160 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 160 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 160 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 160 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 160 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 160 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 160 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 160 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 160 (unary_expression -> postfix_expression .)
    GT              reduce using rule 160 (unary_expression -> postfix_expression .)
    GE              reduce using rule 160 (unary_expression -> postfix_expression .)
    LT              reduce using rule 160 (unary_expression -> postfix_expression .)
    LE              reduce using rule 160 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 160 (unary_expression -> postfix_expression .)
    NE              reduce using rule 160 (unary_expression -> postfix_expression .)
    AND             reduce using rule 160 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 160 (unary_expression -> postfix_expression .)
    OR              reduce using rule 160 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 160 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 160 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 160 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 160 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 160 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 160 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 194
    LPAREN          shift and go to state 195
    PERIOD          shift and go to state 196
    ARROW           shift and go to state 197
    PLUSPLUS        shift and go to state 198
    MINUSMINUS      shift and go to state 199


state 88

    (161) unary_expression -> PLUSPLUS . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 200
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 89

    (162) unary_expression -> MINUSMINUS . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 201
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 90

    (163) unary_expression -> unary_operator . cast_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 202
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 91

    (140) binary_expression -> cast_expression .

    CONDOP          reduce using rule 140 (binary_expression -> cast_expression .)
    TIMES           reduce using rule 140 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 140 (binary_expression -> cast_expression .)
    MOD             reduce using rule 140 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 140 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 140 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 140 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 140 (binary_expression -> cast_expression .)
    GT              reduce using rule 140 (binary_expression -> cast_expression .)
    GE              reduce using rule 140 (binary_expression -> cast_expression .)
    LT              reduce using rule 140 (binary_expression -> cast_expression .)
    LE              reduce using rule 140 (binary_expression -> cast_expression .)
    EQ              reduce using rule 140 (binary_expression -> cast_expression .)
    NE              reduce using rule 140 (binary_expression -> cast_expression .)
    AND             reduce using rule 140 (binary_expression -> cast_expression .)
    XOR             reduce using rule 140 (binary_expression -> cast_expression .)
    OR              reduce using rule 140 (binary_expression -> cast_expression .)
    LAND            reduce using rule 140 (binary_expression -> cast_expression .)
    LOR             reduce using rule 140 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 140 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 140 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 140 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 140 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 140 (binary_expression -> cast_expression .)
    COLON           reduce using rule 140 (binary_expression -> cast_expression .)


state 92

    (165) unary_operator -> TIMES .

    PLUSPLUS        reduce using rule 165 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 165 (unary_operator -> TIMES .)
    AND             reduce using rule 165 (unary_operator -> TIMES .)
    TIMES           reduce using rule 165 (unary_operator -> TIMES .)
    PLUS            reduce using rule 165 (unary_operator -> TIMES .)
    MINUS           reduce using rule 165 (unary_operator -> TIMES .)
    NOT             reduce using rule 165 (unary_operator -> TIMES .)
    LNOT            reduce using rule 165 (unary_operator -> TIMES .)
    LPAREN          reduce using rule 165 (unary_operator -> TIMES .)
    ID              reduce using rule 165 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 165 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 165 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 165 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 165 (unary_operator -> TIMES .)


state 93

    (166) unary_operator -> PLUS .

    PLUSPLUS        reduce using rule 166 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 166 (unary_operator -> PLUS .)
    AND             reduce using rule 166 (unary_operator -> PLUS .)
    TIMES           reduce using rule 166 (unary_operator -> PLUS .)
    PLUS            reduce using rule 166 (unary_operator -> PLUS .)
    MINUS           reduce using rule 166 (unary_operator -> PLUS .)
    NOT             reduce using rule 166 (unary_operator -> PLUS .)
    LNOT            reduce using rule 166 (unary_operator -> PLUS .)
    LPAREN          reduce using rule 166 (unary_operator -> PLUS .)
    ID              reduce using rule 166 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 166 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 166 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 166 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 166 (unary_operator -> PLUS .)


state 94

    (167) unary_operator -> MINUS .

    PLUSPLUS        reduce using rule 167 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 167 (unary_operator -> MINUS .)
    AND             reduce using rule 167 (unary_operator -> MINUS .)
    TIMES           reduce using rule 167 (unary_operator -> MINUS .)
    PLUS            reduce using rule 167 (unary_operator -> MINUS .)
    MINUS           reduce using rule 167 (unary_operator -> MINUS .)
    NOT             reduce using rule 167 (unary_operator -> MINUS .)
    LNOT            reduce using rule 167 (unary_operator -> MINUS .)
    LPAREN          reduce using rule 167 (unary_operator -> MINUS .)
    ID              reduce using rule 167 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 167 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 167 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 167 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 167 (unary_operator -> MINUS .)


state 95

    (164) unary_operator -> AND .

    PLUSPLUS        reduce using rule 164 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 164 (unary_operator -> AND .)
    AND             reduce using rule 164 (unary_operator -> AND .)
    TIMES           reduce using rule 164 (unary_operator -> AND .)
    PLUS            reduce using rule 164 (unary_operator -> AND .)
    MINUS           reduce using rule 164 (unary_operator -> AND .)
    NOT             reduce using rule 164 (unary_operator -> AND .)
    LNOT            reduce using rule 164 (unary_operator -> AND .)
    LPAREN          reduce using rule 164 (unary_operator -> AND .)
    ID              reduce using rule 164 (unary_operator -> AND .)
    INT_CONST       reduce using rule 164 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 164 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 164 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 164 (unary_operator -> AND .)


state 96

    (172) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 172 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 172 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 172 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 172 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 172 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 172 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 172 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 172 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 172 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 172 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 172 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 172 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 172 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 172 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 172 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 172 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 172 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 172 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 172 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 172 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 172 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 172 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 172 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 172 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 172 (postfix_expression -> primary_expression .)
    GT              reduce using rule 172 (postfix_expression -> primary_expression .)
    GE              reduce using rule 172 (postfix_expression -> primary_expression .)
    LT              reduce using rule 172 (postfix_expression -> primary_expression .)
    LE              reduce using rule 172 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 172 (postfix_expression -> primary_expression .)
    NE              reduce using rule 172 (postfix_expression -> primary_expression .)
    AND             reduce using rule 172 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 172 (postfix_expression -> primary_expression .)
    OR              reduce using rule 172 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 172 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 172 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 172 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 172 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 172 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 172 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 172 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 172 (postfix_expression -> primary_expression .)


state 97

    (183) primary_expression -> LPAREN . expression RPAREN
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 204
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 98

    (180) primary_expression -> identifier .

    LBRACKET        reduce using rule 180 (primary_expression -> identifier .)
    LPAREN          reduce using rule 180 (primary_expression -> identifier .)
    PERIOD          reduce using rule 180 (primary_expression -> identifier .)
    ARROW           reduce using rule 180 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 180 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 180 (primary_expression -> identifier .)
    EQUALS          reduce using rule 180 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 180 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 180 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 180 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 180 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 180 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 180 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 180 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 180 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 180 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 180 (primary_expression -> identifier .)
    CONDOP          reduce using rule 180 (primary_expression -> identifier .)
    TIMES           reduce using rule 180 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 180 (primary_expression -> identifier .)
    MOD             reduce using rule 180 (primary_expression -> identifier .)
    PLUS            reduce using rule 180 (primary_expression -> identifier .)
    MINUS           reduce using rule 180 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 180 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 180 (primary_expression -> identifier .)
    GT              reduce using rule 180 (primary_expression -> identifier .)
    GE              reduce using rule 180 (primary_expression -> identifier .)
    LT              reduce using rule 180 (primary_expression -> identifier .)
    LE              reduce using rule 180 (primary_expression -> identifier .)
    EQ              reduce using rule 180 (primary_expression -> identifier .)
    NE              reduce using rule 180 (primary_expression -> identifier .)
    AND             reduce using rule 180 (primary_expression -> identifier .)
    XOR             reduce using rule 180 (primary_expression -> identifier .)
    OR              reduce using rule 180 (primary_expression -> identifier .)
    LAND            reduce using rule 180 (primary_expression -> identifier .)
    LOR             reduce using rule 180 (primary_expression -> identifier .)
    SEMI            reduce using rule 180 (primary_expression -> identifier .)
    COMMA           reduce using rule 180 (primary_expression -> identifier .)
    RBRACE          reduce using rule 180 (primary_expression -> identifier .)
    RPAREN          reduce using rule 180 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 180 (primary_expression -> identifier .)
    COLON           reduce using rule 180 (primary_expression -> identifier .)


state 99

    (168) unary_operator -> NOT .

    PLUSPLUS        reduce using rule 168 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 168 (unary_operator -> NOT .)
    AND             reduce using rule 168 (unary_operator -> NOT .)
    TIMES           reduce using rule 168 (unary_operator -> NOT .)
    PLUS            reduce using rule 168 (unary_operator -> NOT .)
    MINUS           reduce using rule 168 (unary_operator -> NOT .)
    NOT             reduce using rule 168 (unary_operator -> NOT .)
    LNOT            reduce using rule 168 (unary_operator -> NOT .)
    LPAREN          reduce using rule 168 (unary_operator -> NOT .)
    ID              reduce using rule 168 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 168 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 168 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 168 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 168 (unary_operator -> NOT .)


state 100

    (169) unary_operator -> LNOT .

    PLUSPLUS        reduce using rule 169 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 169 (unary_operator -> LNOT .)
    AND             reduce using rule 169 (unary_operator -> LNOT .)
    TIMES           reduce using rule 169 (unary_operator -> LNOT .)
    PLUS            reduce using rule 169 (unary_operator -> LNOT .)
    MINUS           reduce using rule 169 (unary_operator -> LNOT .)
    NOT             reduce using rule 169 (unary_operator -> LNOT .)
    LNOT            reduce using rule 169 (unary_operator -> LNOT .)
    LPAREN          reduce using rule 169 (unary_operator -> LNOT .)
    ID              reduce using rule 169 (unary_operator -> LNOT .)
    INT_CONST       reduce using rule 169 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 169 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 169 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 169 (unary_operator -> LNOT .)


state 101

    (181) primary_expression -> constant .

    LBRACKET        reduce using rule 181 (primary_expression -> constant .)
    LPAREN          reduce using rule 181 (primary_expression -> constant .)
    PERIOD          reduce using rule 181 (primary_expression -> constant .)
    ARROW           reduce using rule 181 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 181 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 181 (primary_expression -> constant .)
    EQUALS          reduce using rule 181 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 181 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 181 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 181 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 181 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 181 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 181 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 181 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 181 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 181 (primary_expression -> constant .)
    OREQUAL         reduce using rule 181 (primary_expression -> constant .)
    CONDOP          reduce using rule 181 (primary_expression -> constant .)
    TIMES           reduce using rule 181 (primary_expression -> constant .)
    DIVIDE          reduce using rule 181 (primary_expression -> constant .)
    MOD             reduce using rule 181 (primary_expression -> constant .)
    PLUS            reduce using rule 181 (primary_expression -> constant .)
    MINUS           reduce using rule 181 (primary_expression -> constant .)
    LSHIFT          reduce using rule 181 (primary_expression -> constant .)
    RSHIFT          reduce using rule 181 (primary_expression -> constant .)
    GT              reduce using rule 181 (primary_expression -> constant .)
    GE              reduce using rule 181 (primary_expression -> constant .)
    LT              reduce using rule 181 (primary_expression -> constant .)
    LE              reduce using rule 181 (primary_expression -> constant .)
    EQ              reduce using rule 181 (primary_expression -> constant .)
    NE              reduce using rule 181 (primary_expression -> constant .)
    AND             reduce using rule 181 (primary_expression -> constant .)
    XOR             reduce using rule 181 (primary_expression -> constant .)
    OR              reduce using rule 181 (primary_expression -> constant .)
    LAND            reduce using rule 181 (primary_expression -> constant .)
    LOR             reduce using rule 181 (primary_expression -> constant .)
    SEMI            reduce using rule 181 (primary_expression -> constant .)
    COMMA           reduce using rule 181 (primary_expression -> constant .)
    RBRACE          reduce using rule 181 (primary_expression -> constant .)
    RPAREN          reduce using rule 181 (primary_expression -> constant .)
    RBRACKET        reduce using rule 181 (primary_expression -> constant .)
    COLON           reduce using rule 181 (primary_expression -> constant .)


state 102

    (182) primary_expression -> string_literal .

    LBRACKET        reduce using rule 182 (primary_expression -> string_literal .)
    LPAREN          reduce using rule 182 (primary_expression -> string_literal .)
    PERIOD          reduce using rule 182 (primary_expression -> string_literal .)
    ARROW           reduce using rule 182 (primary_expression -> string_literal .)
    PLUSPLUS        reduce using rule 182 (primary_expression -> string_literal .)
    MINUSMINUS      reduce using rule 182 (primary_expression -> string_literal .)
    EQUALS          reduce using rule 182 (primary_expression -> string_literal .)
    XOREQUAL        reduce using rule 182 (primary_expression -> string_literal .)
    TIMESEQUAL      reduce using rule 182 (primary_expression -> string_literal .)
    DIVEQUAL        reduce using rule 182 (primary_expression -> string_literal .)
    MODEQUAL        reduce using rule 182 (primary_expression -> string_literal .)
    PLUSEQUAL       reduce using rule 182 (primary_expression -> string_literal .)
    MINUSEQUAL      reduce using rule 182 (primary_expression -> string_literal .)
    LSHIFTEQUAL     reduce using rule 182 (primary_expression -> string_literal .)
    RSHIFTEQUAL     reduce using rule 182 (primary_expression -> string_literal .)
    ANDEQUAL        reduce using rule 182 (primary_expression -> string_literal .)
    OREQUAL         reduce using rule 182 (primary_expression -> string_literal .)
    CONDOP          reduce using rule 182 (primary_expression -> string_literal .)
    TIMES           reduce using rule 182 (primary_expression -> string_literal .)
    DIVIDE          reduce using rule 182 (primary_expression -> string_literal .)
    MOD             reduce using rule 182 (primary_expression -> string_literal .)
    PLUS            reduce using rule 182 (primary_expression -> string_literal .)
    MINUS           reduce using rule 182 (primary_expression -> string_literal .)
    LSHIFT          reduce using rule 182 (primary_expression -> string_literal .)
    RSHIFT          reduce using rule 182 (primary_expression -> string_literal .)
    GT              reduce using rule 182 (primary_expression -> string_literal .)
    GE              reduce using rule 182 (primary_expression -> string_literal .)
    LT              reduce using rule 182 (primary_expression -> string_literal .)
    LE              reduce using rule 182 (primary_expression -> string_literal .)
    EQ              reduce using rule 182 (primary_expression -> string_literal .)
    NE              reduce using rule 182 (primary_expression -> string_literal .)
    AND             reduce using rule 182 (primary_expression -> string_literal .)
    XOR             reduce using rule 182 (primary_expression -> string_literal .)
    OR              reduce using rule 182 (primary_expression -> string_literal .)
    LAND            reduce using rule 182 (primary_expression -> string_literal .)
    LOR             reduce using rule 182 (primary_expression -> string_literal .)
    SEMI            reduce using rule 182 (primary_expression -> string_literal .)
    COMMA           reduce using rule 182 (primary_expression -> string_literal .)
    RBRACE          reduce using rule 182 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 182 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 182 (primary_expression -> string_literal .)
    COLON           reduce using rule 182 (primary_expression -> string_literal .)


state 103

    (184) identifier -> ID .

    LBRACKET        reduce using rule 184 (identifier -> ID .)
    LPAREN          reduce using rule 184 (identifier -> ID .)
    PERIOD          reduce using rule 184 (identifier -> ID .)
    ARROW           reduce using rule 184 (identifier -> ID .)
    PLUSPLUS        reduce using rule 184 (identifier -> ID .)
    MINUSMINUS      reduce using rule 184 (identifier -> ID .)
    EQUALS          reduce using rule 184 (identifier -> ID .)
    XOREQUAL        reduce using rule 184 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 184 (identifier -> ID .)
    DIVEQUAL        reduce using rule 184 (identifier -> ID .)
    MODEQUAL        reduce using rule 184 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 184 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 184 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 184 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 184 (identifier -> ID .)
    ANDEQUAL        reduce using rule 184 (identifier -> ID .)
    OREQUAL         reduce using rule 184 (identifier -> ID .)
    CONDOP          reduce using rule 184 (identifier -> ID .)
    TIMES           reduce using rule 184 (identifier -> ID .)
    DIVIDE          reduce using rule 184 (identifier -> ID .)
    MOD             reduce using rule 184 (identifier -> ID .)
    PLUS            reduce using rule 184 (identifier -> ID .)
    MINUS           reduce using rule 184 (identifier -> ID .)
    LSHIFT          reduce using rule 184 (identifier -> ID .)
    RSHIFT          reduce using rule 184 (identifier -> ID .)
    GT              reduce using rule 184 (identifier -> ID .)
    GE              reduce using rule 184 (identifier -> ID .)
    LT              reduce using rule 184 (identifier -> ID .)
    LE              reduce using rule 184 (identifier -> ID .)
    EQ              reduce using rule 184 (identifier -> ID .)
    NE              reduce using rule 184 (identifier -> ID .)
    AND             reduce using rule 184 (identifier -> ID .)
    XOR             reduce using rule 184 (identifier -> ID .)
    OR              reduce using rule 184 (identifier -> ID .)
    LAND            reduce using rule 184 (identifier -> ID .)
    LOR             reduce using rule 184 (identifier -> ID .)
    SEMI            reduce using rule 184 (identifier -> ID .)
    COMMA           reduce using rule 184 (identifier -> ID .)
    RPAREN          reduce using rule 184 (identifier -> ID .)
    RBRACE          reduce using rule 184 (identifier -> ID .)
    RBRACKET        reduce using rule 184 (identifier -> ID .)
    COLON           reduce using rule 184 (identifier -> ID .)


state 104

    (185) constant -> INT_CONST .

    LBRACKET        reduce using rule 185 (constant -> INT_CONST .)
    LPAREN          reduce using rule 185 (constant -> INT_CONST .)
    PERIOD          reduce using rule 185 (constant -> INT_CONST .)
    ARROW           reduce using rule 185 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 185 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 185 (constant -> INT_CONST .)
    EQUALS          reduce using rule 185 (constant -> INT_CONST .)
    XOREQUAL        reduce using rule 185 (constant -> INT_CONST .)
    TIMESEQUAL      reduce using rule 185 (constant -> INT_CONST .)
    DIVEQUAL        reduce using rule 185 (constant -> INT_CONST .)
    MODEQUAL        reduce using rule 185 (constant -> INT_CONST .)
    PLUSEQUAL       reduce using rule 185 (constant -> INT_CONST .)
    MINUSEQUAL      reduce using rule 185 (constant -> INT_CONST .)
    LSHIFTEQUAL     reduce using rule 185 (constant -> INT_CONST .)
    RSHIFTEQUAL     reduce using rule 185 (constant -> INT_CONST .)
    ANDEQUAL        reduce using rule 185 (constant -> INT_CONST .)
    OREQUAL         reduce using rule 185 (constant -> INT_CONST .)
    CONDOP          reduce using rule 185 (constant -> INT_CONST .)
    TIMES           reduce using rule 185 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 185 (constant -> INT_CONST .)
    MOD             reduce using rule 185 (constant -> INT_CONST .)
    PLUS            reduce using rule 185 (constant -> INT_CONST .)
    MINUS           reduce using rule 185 (constant -> INT_CONST .)
    LSHIFT          reduce using rule 185 (constant -> INT_CONST .)
    RSHIFT          reduce using rule 185 (constant -> INT_CONST .)
    GT              reduce using rule 185 (constant -> INT_CONST .)
    GE              reduce using rule 185 (constant -> INT_CONST .)
    LT              reduce using rule 185 (constant -> INT_CONST .)
    LE              reduce using rule 185 (constant -> INT_CONST .)
    EQ              reduce using rule 185 (constant -> INT_CONST .)
    NE              reduce using rule 185 (constant -> INT_CONST .)
    AND             reduce using rule 185 (constant -> INT_CONST .)
    XOR             reduce using rule 185 (constant -> INT_CONST .)
    OR              reduce using rule 185 (constant -> INT_CONST .)
    LAND            reduce using rule 185 (constant -> INT_CONST .)
    LOR             reduce using rule 185 (constant -> INT_CONST .)
    SEMI            reduce using rule 185 (constant -> INT_CONST .)
    COMMA           reduce using rule 185 (constant -> INT_CONST .)
    RBRACE          reduce using rule 185 (constant -> INT_CONST .)
    RPAREN          reduce using rule 185 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 185 (constant -> INT_CONST .)
    COLON           reduce using rule 185 (constant -> INT_CONST .)


state 105

    (186) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 186 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 186 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 186 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 186 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 186 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 186 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 186 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 186 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 186 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 186 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 186 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 186 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 186 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 186 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 186 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 186 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 186 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 186 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 186 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 186 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 186 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 186 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 186 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 186 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 186 (constant -> FLOAT_CONST .)
    GT              reduce using rule 186 (constant -> FLOAT_CONST .)
    GE              reduce using rule 186 (constant -> FLOAT_CONST .)
    LT              reduce using rule 186 (constant -> FLOAT_CONST .)
    LE              reduce using rule 186 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 186 (constant -> FLOAT_CONST .)
    NE              reduce using rule 186 (constant -> FLOAT_CONST .)
    AND             reduce using rule 186 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 186 (constant -> FLOAT_CONST .)
    OR              reduce using rule 186 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 186 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 186 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 186 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 186 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 186 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 186 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 186 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 186 (constant -> FLOAT_CONST .)


state 106

    (187) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 187 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 187 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 187 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 187 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 187 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 187 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 187 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 187 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 187 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 187 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 187 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 187 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 187 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 187 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 187 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 187 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 187 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 187 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 187 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 187 (constant -> CHAR_CONST .)
    MOD             reduce using rule 187 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 187 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 187 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 187 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 187 (constant -> CHAR_CONST .)
    GT              reduce using rule 187 (constant -> CHAR_CONST .)
    GE              reduce using rule 187 (constant -> CHAR_CONST .)
    LT              reduce using rule 187 (constant -> CHAR_CONST .)
    LE              reduce using rule 187 (constant -> CHAR_CONST .)
    EQ              reduce using rule 187 (constant -> CHAR_CONST .)
    NE              reduce using rule 187 (constant -> CHAR_CONST .)
    AND             reduce using rule 187 (constant -> CHAR_CONST .)
    XOR             reduce using rule 187 (constant -> CHAR_CONST .)
    OR              reduce using rule 187 (constant -> CHAR_CONST .)
    LAND            reduce using rule 187 (constant -> CHAR_CONST .)
    LOR             reduce using rule 187 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 187 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 187 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 187 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 187 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 187 (constant -> CHAR_CONST .)
    COLON           reduce using rule 187 (constant -> CHAR_CONST .)


state 107

    (188) string_literal -> STRING_LITERAL .

    LBRACKET        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 188 (string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 188 (string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 188 (string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 188 (string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 188 (string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 188 (string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 188 (string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 188 (string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 188 (string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 188 (string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    GT              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    GE              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LT              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LE              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    NE              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    AND             reduce using rule 188 (string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 188 (string_literal -> STRING_LITERAL .)
    OR              reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 188 (string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 188 (string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 188 (string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 188 (string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 188 (string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 188 (string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 188 (string_literal -> STRING_LITERAL .)


state 108

    (27) declaration_list -> declaration_list declaration .

    AUTO            reduce using rule 27 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 27 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 27 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 27 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 27 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 27 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 27 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 27 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 27 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 27 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 27 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 27 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 27 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 27 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 27 (declaration_list -> declaration_list declaration .)


state 109

    (51) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 51 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 51 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 110

    (58) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (1) assignment_expression_opt -> . empty
    (2) assignment_expression_opt -> . assignment_expression
    (191) empty -> .
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RBRACKET        reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    assignment_expression_opt      shift and go to state 205
    empty                          shift and go to state 206
    assignment_expression          shift and go to state 207
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 111

    (59) direct_declarator -> direct_declarator LBRACKET STATIC . type_qualifier_list assignment_expression RBRACKET
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    type_qualifier_list            shift and go to state 208
    type_qualifier                 shift and go to state 67

state 112

    (60) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (18) type_qualifier_list_opt -> type_qualifier_list .
    (75) type_qualifier_list -> type_qualifier_list . type_qualifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 209
    PLUSPLUS        reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    TIMES           reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST       reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 18 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    type_qualifier                 shift and go to state 123

state 113

    (61) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 210


state 114

    (62) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 211


state 115

    (11) identifier_list_opt -> empty .

    RPAREN          reduce using rule 11 (identifier_list_opt -> empty .)


state 116

    (12) identifier_list_opt -> identifier_list .
    (64) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 12 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 212


state 117

    (65) parameter_type_list -> parameter_list .
    (67) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 65 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 213


state 118

    (63) identifier_list -> identifier .

    COMMA           reduce using rule 63 (identifier_list -> identifier .)
    RPAREN          reduce using rule 63 (identifier_list -> identifier .)


state 119

    (66) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 66 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 66 (parameter_list -> parameter_declaration .)


state 120

    (68) parameter_declaration -> declaration_specifiers . declarator
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    declarator                     shift and go to state 214
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 121

    (57) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 57 (direct_declarator -> LPAREN declarator RPAREN .)


state 122

    (73) pointer -> TIMES type_qualifier_list_opt pointer .

    ID              reduce using rule 73 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LPAREN          reduce using rule 73 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 123

    (75) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOID            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SHORT           reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT             reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LONG            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ENUM            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRUCT          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUSPLUS        reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUSMINUS      reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND             reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST       reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT_CONST     reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR_CONST      reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 75 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 124

    (98) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (100) enumerator_list -> enumerator_list . COMMA
    (101) enumerator_list -> enumerator_list . COMMA enumerator
    (190) brace_close -> . RBRACE

    COMMA           shift and go to state 126
    RBRACE          shift and go to state 127

    brace_close                    shift and go to state 215

state 125

    (97) enum_specifier -> ENUM brace_open enumerator_list brace_close .

    AUTO            reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CONST           reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 97 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 126

    (100) enumerator_list -> enumerator_list COMMA .
    (101) enumerator_list -> enumerator_list COMMA . enumerator
    (102) enumerator -> . ID
    (103) enumerator -> . ID EQUALS constant_expression

    COMMA           reduce using rule 100 (enumerator_list -> enumerator_list COMMA .)
    RBRACE          reduce using rule 100 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 71

    enumerator                     shift and go to state 216

state 127

    (190) brace_close -> RBRACE .

    AUTO            reduce using rule 190 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 190 (brace_close -> RBRACE .)
    STATIC          reduce using rule 190 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 190 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 190 (brace_close -> RBRACE .)
    CONST           reduce using rule 190 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 190 (brace_close -> RBRACE .)
    VOID            reduce using rule 190 (brace_close -> RBRACE .)
    CHAR            reduce using rule 190 (brace_close -> RBRACE .)
    SHORT           reduce using rule 190 (brace_close -> RBRACE .)
    INT             reduce using rule 190 (brace_close -> RBRACE .)
    LONG            reduce using rule 190 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 190 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 190 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 190 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 190 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 190 (brace_close -> RBRACE .)
    ENUM            reduce using rule 190 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 190 (brace_close -> RBRACE .)
    ID              reduce using rule 190 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 190 (brace_close -> RBRACE .)
    TIMES           reduce using rule 190 (brace_close -> RBRACE .)
    $end            reduce using rule 190 (brace_close -> RBRACE .)
    IF              reduce using rule 190 (brace_close -> RBRACE .)
    WHILE           reduce using rule 190 (brace_close -> RBRACE .)
    DO              reduce using rule 190 (brace_close -> RBRACE .)
    FOR             reduce using rule 190 (brace_close -> RBRACE .)
    BREAK           reduce using rule 190 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 190 (brace_close -> RBRACE .)
    RETURN          reduce using rule 190 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 190 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 190 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 190 (brace_close -> RBRACE .)
    AND             reduce using rule 190 (brace_close -> RBRACE .)
    PLUS            reduce using rule 190 (brace_close -> RBRACE .)
    MINUS           reduce using rule 190 (brace_close -> RBRACE .)
    NOT             reduce using rule 190 (brace_close -> RBRACE .)
    LNOT            reduce using rule 190 (brace_close -> RBRACE .)
    INT_CONST       reduce using rule 190 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 190 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 190 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 190 (brace_close -> RBRACE .)
    SEMI            reduce using rule 190 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 190 (brace_close -> RBRACE .)
    ELSE            reduce using rule 190 (brace_close -> RBRACE .)
    COMMA           reduce using rule 190 (brace_close -> RBRACE .)


state 128

    (103) enumerator -> ID EQUALS . constant_expression
    (122) constant_expression -> . conditional_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    constant_expression            shift and go to state 217
    conditional_expression         shift and go to state 218
    binary_expression              shift and go to state 86
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 129

    (106) struct_specifier -> STRUCT ID brace_open struct_declaration_list . brace_close
    (108) struct_declaration_list -> struct_declaration_list . struct_declaration
    (190) brace_close -> . RBRACE
    (109) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI
    (110) specifier_qualifier_list -> . specifier_qualifier_list type_specifier
    (111) specifier_qualifier_list -> . specifier_qualifier_list type_qualifier
    (112) specifier_qualifier_list -> . type_specifier
    (113) specifier_qualifier_list -> . type_qualifier_list type_specifier
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (74) type_qualifier_list -> . type_qualifier
    (75) type_qualifier_list -> . type_qualifier_list type_qualifier
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE

    RBRACE          shift and go to state 127
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20

    brace_close                    shift and go to state 219
    struct_declaration             shift and go to state 131
    specifier_qualifier_list       shift and go to state 75
    type_specifier                 shift and go to state 76
    type_qualifier                 shift and go to state 67
    type_qualifier_list            shift and go to state 77
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 130

    (105) struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .

    AUTO            reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    CONST           reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 105 (struct_specifier -> STRUCT brace_open struct_declaration_list brace_close .)


state 131

    (108) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 108 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 132

    (109) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI

    SEMI            shift and go to state 220


state 133

    (110) specifier_qualifier_list -> specifier_qualifier_list type_specifier .

    CONST           reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    VOLATILE        reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    VOID            reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    CHAR            reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    SHORT           reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    INT             reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    LONG            reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    FLOAT           reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    DOUBLE          reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    SIGNED          reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    UNSIGNED        reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    TYPEID          reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    ENUM            reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    STRUCT          reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    ID              reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    LPAREN          reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)
    TIMES           reduce using rule 110 (specifier_qualifier_list -> specifier_qualifier_list type_specifier .)


state 134

    (111) specifier_qualifier_list -> specifier_qualifier_list type_qualifier .

    CONST           reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    VOID            reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    CHAR            reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SHORT           reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    INT             reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LONG            reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    FLOAT           reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    DOUBLE          reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    SIGNED          reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    UNSIGNED        reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ENUM            reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    STRUCT          reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    ID              reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)
    TIMES           reduce using rule 111 (specifier_qualifier_list -> specifier_qualifier_list type_qualifier .)


state 135

    (114) struct_declarator_list -> struct_declarator .
    (115) struct_declarator_list -> struct_declarator . COMMA struct_declarator

    SEMI            reduce using rule 114 (struct_declarator_list -> struct_declarator .)
    COMMA           shift and go to state 221


state 136

    (116) struct_declarator -> declarator .

    COMMA           reduce using rule 116 (struct_declarator -> declarator .)
    SEMI            reduce using rule 116 (struct_declarator -> declarator .)


state 137

    (113) specifier_qualifier_list -> type_qualifier_list type_specifier .

    CONST           reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOLATILE        reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    VOID            reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    CHAR            reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SHORT           reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    INT             reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LONG            reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    FLOAT           reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    DOUBLE          reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    SIGNED          reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    UNSIGNED        reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TYPEID          reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ENUM            reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    STRUCT          reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    ID              reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    LPAREN          reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)
    TIMES           reduce using rule 113 (specifier_qualifier_list -> type_qualifier_list type_specifier .)


state 138

    (33) compound_statement -> brace_open block_item_list_opt . brace_close
    (190) brace_close -> . RBRACE

    RBRACE          shift and go to state 127

    brace_close                    shift and go to state 222

state 139

    (3) block_item_list_opt -> empty .
    (9) expression_opt -> empty .

    RBRACE          reduce using rule 3 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 9 (expression_opt -> empty .)


state 140

    (4) block_item_list_opt -> block_item_list .
    (35) block_item_list -> block_item_list . block_item
    (36) block_item -> . declaration
    (37) block_item -> . statement
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RBRACE          reduce using rule 4 (block_item_list_opt -> block_item_list .)
    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    LBRACE          shift and go to state 49
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    block_item                     shift and go to state 223
    declaration                    shift and go to state 142
    statement                      shift and go to state 143
    declaration_specifiers         shift and go to state 52
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    expression_opt                 shift and go to state 149
    brace_open                     shift and go to state 80
    expression                     shift and go to state 151
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 141

    (34) block_item_list -> block_item .

    IF              reduce using rule 34 (block_item_list -> block_item .)
    WHILE           reduce using rule 34 (block_item_list -> block_item .)
    DO              reduce using rule 34 (block_item_list -> block_item .)
    FOR             reduce using rule 34 (block_item_list -> block_item .)
    BREAK           reduce using rule 34 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 34 (block_item_list -> block_item .)
    RETURN          reduce using rule 34 (block_item_list -> block_item .)
    AUTO            reduce using rule 34 (block_item_list -> block_item .)
    REGISTER        reduce using rule 34 (block_item_list -> block_item .)
    STATIC          reduce using rule 34 (block_item_list -> block_item .)
    EXTERN          reduce using rule 34 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 34 (block_item_list -> block_item .)
    CONST           reduce using rule 34 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 34 (block_item_list -> block_item .)
    LBRACE          reduce using rule 34 (block_item_list -> block_item .)
    VOID            reduce using rule 34 (block_item_list -> block_item .)
    CHAR            reduce using rule 34 (block_item_list -> block_item .)
    SHORT           reduce using rule 34 (block_item_list -> block_item .)
    INT             reduce using rule 34 (block_item_list -> block_item .)
    LONG            reduce using rule 34 (block_item_list -> block_item .)
    FLOAT           reduce using rule 34 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 34 (block_item_list -> block_item .)
    SIGNED          reduce using rule 34 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 34 (block_item_list -> block_item .)
    TYPEID          reduce using rule 34 (block_item_list -> block_item .)
    ENUM            reduce using rule 34 (block_item_list -> block_item .)
    STRUCT          reduce using rule 34 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 34 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 34 (block_item_list -> block_item .)
    AND             reduce using rule 34 (block_item_list -> block_item .)
    TIMES           reduce using rule 34 (block_item_list -> block_item .)
    PLUS            reduce using rule 34 (block_item_list -> block_item .)
    MINUS           reduce using rule 34 (block_item_list -> block_item .)
    NOT             reduce using rule 34 (block_item_list -> block_item .)
    LNOT            reduce using rule 34 (block_item_list -> block_item .)
    LPAREN          reduce using rule 34 (block_item_list -> block_item .)
    ID              reduce using rule 34 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 34 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 34 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 34 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 34 (block_item_list -> block_item .)
    SEMI            reduce using rule 34 (block_item_list -> block_item .)
    RBRACE          reduce using rule 34 (block_item_list -> block_item .)


state 142

    (36) block_item -> declaration .

    IF              reduce using rule 36 (block_item -> declaration .)
    WHILE           reduce using rule 36 (block_item -> declaration .)
    DO              reduce using rule 36 (block_item -> declaration .)
    FOR             reduce using rule 36 (block_item -> declaration .)
    BREAK           reduce using rule 36 (block_item -> declaration .)
    CONTINUE        reduce using rule 36 (block_item -> declaration .)
    RETURN          reduce using rule 36 (block_item -> declaration .)
    AUTO            reduce using rule 36 (block_item -> declaration .)
    REGISTER        reduce using rule 36 (block_item -> declaration .)
    STATIC          reduce using rule 36 (block_item -> declaration .)
    EXTERN          reduce using rule 36 (block_item -> declaration .)
    TYPEDEF         reduce using rule 36 (block_item -> declaration .)
    CONST           reduce using rule 36 (block_item -> declaration .)
    VOLATILE        reduce using rule 36 (block_item -> declaration .)
    LBRACE          reduce using rule 36 (block_item -> declaration .)
    VOID            reduce using rule 36 (block_item -> declaration .)
    CHAR            reduce using rule 36 (block_item -> declaration .)
    SHORT           reduce using rule 36 (block_item -> declaration .)
    INT             reduce using rule 36 (block_item -> declaration .)
    LONG            reduce using rule 36 (block_item -> declaration .)
    FLOAT           reduce using rule 36 (block_item -> declaration .)
    DOUBLE          reduce using rule 36 (block_item -> declaration .)
    SIGNED          reduce using rule 36 (block_item -> declaration .)
    UNSIGNED        reduce using rule 36 (block_item -> declaration .)
    TYPEID          reduce using rule 36 (block_item -> declaration .)
    ENUM            reduce using rule 36 (block_item -> declaration .)
    STRUCT          reduce using rule 36 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 36 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 36 (block_item -> declaration .)
    AND             reduce using rule 36 (block_item -> declaration .)
    TIMES           reduce using rule 36 (block_item -> declaration .)
    PLUS            reduce using rule 36 (block_item -> declaration .)
    MINUS           reduce using rule 36 (block_item -> declaration .)
    NOT             reduce using rule 36 (block_item -> declaration .)
    LNOT            reduce using rule 36 (block_item -> declaration .)
    LPAREN          reduce using rule 36 (block_item -> declaration .)
    ID              reduce using rule 36 (block_item -> declaration .)
    INT_CONST       reduce using rule 36 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 36 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 36 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 36 (block_item -> declaration .)
    SEMI            reduce using rule 36 (block_item -> declaration .)
    RBRACE          reduce using rule 36 (block_item -> declaration .)


state 143

    (37) block_item -> statement .

    IF              reduce using rule 37 (block_item -> statement .)
    WHILE           reduce using rule 37 (block_item -> statement .)
    DO              reduce using rule 37 (block_item -> statement .)
    FOR             reduce using rule 37 (block_item -> statement .)
    BREAK           reduce using rule 37 (block_item -> statement .)
    CONTINUE        reduce using rule 37 (block_item -> statement .)
    RETURN          reduce using rule 37 (block_item -> statement .)
    AUTO            reduce using rule 37 (block_item -> statement .)
    REGISTER        reduce using rule 37 (block_item -> statement .)
    STATIC          reduce using rule 37 (block_item -> statement .)
    EXTERN          reduce using rule 37 (block_item -> statement .)
    TYPEDEF         reduce using rule 37 (block_item -> statement .)
    CONST           reduce using rule 37 (block_item -> statement .)
    VOLATILE        reduce using rule 37 (block_item -> statement .)
    LBRACE          reduce using rule 37 (block_item -> statement .)
    VOID            reduce using rule 37 (block_item -> statement .)
    CHAR            reduce using rule 37 (block_item -> statement .)
    SHORT           reduce using rule 37 (block_item -> statement .)
    INT             reduce using rule 37 (block_item -> statement .)
    LONG            reduce using rule 37 (block_item -> statement .)
    FLOAT           reduce using rule 37 (block_item -> statement .)
    DOUBLE          reduce using rule 37 (block_item -> statement .)
    SIGNED          reduce using rule 37 (block_item -> statement .)
    UNSIGNED        reduce using rule 37 (block_item -> statement .)
    TYPEID          reduce using rule 37 (block_item -> statement .)
    ENUM            reduce using rule 37 (block_item -> statement .)
    STRUCT          reduce using rule 37 (block_item -> statement .)
    PLUSPLUS        reduce using rule 37 (block_item -> statement .)
    MINUSMINUS      reduce using rule 37 (block_item -> statement .)
    AND             reduce using rule 37 (block_item -> statement .)
    TIMES           reduce using rule 37 (block_item -> statement .)
    PLUS            reduce using rule 37 (block_item -> statement .)
    MINUS           reduce using rule 37 (block_item -> statement .)
    NOT             reduce using rule 37 (block_item -> statement .)
    LNOT            reduce using rule 37 (block_item -> statement .)
    LPAREN          reduce using rule 37 (block_item -> statement .)
    ID              reduce using rule 37 (block_item -> statement .)
    INT_CONST       reduce using rule 37 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 37 (block_item -> statement .)
    CHAR_CONST      reduce using rule 37 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 37 (block_item -> statement .)
    SEMI            reduce using rule 37 (block_item -> statement .)
    RBRACE          reduce using rule 37 (block_item -> statement .)


state 144

    (28) statement -> expression_statement .

    IF              reduce using rule 28 (statement -> expression_statement .)
    WHILE           reduce using rule 28 (statement -> expression_statement .)
    DO              reduce using rule 28 (statement -> expression_statement .)
    FOR             reduce using rule 28 (statement -> expression_statement .)
    BREAK           reduce using rule 28 (statement -> expression_statement .)
    CONTINUE        reduce using rule 28 (statement -> expression_statement .)
    RETURN          reduce using rule 28 (statement -> expression_statement .)
    AUTO            reduce using rule 28 (statement -> expression_statement .)
    REGISTER        reduce using rule 28 (statement -> expression_statement .)
    STATIC          reduce using rule 28 (statement -> expression_statement .)
    EXTERN          reduce using rule 28 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 28 (statement -> expression_statement .)
    CONST           reduce using rule 28 (statement -> expression_statement .)
    VOLATILE        reduce using rule 28 (statement -> expression_statement .)
    LBRACE          reduce using rule 28 (statement -> expression_statement .)
    VOID            reduce using rule 28 (statement -> expression_statement .)
    CHAR            reduce using rule 28 (statement -> expression_statement .)
    SHORT           reduce using rule 28 (statement -> expression_statement .)
    INT             reduce using rule 28 (statement -> expression_statement .)
    LONG            reduce using rule 28 (statement -> expression_statement .)
    FLOAT           reduce using rule 28 (statement -> expression_statement .)
    DOUBLE          reduce using rule 28 (statement -> expression_statement .)
    SIGNED          reduce using rule 28 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 28 (statement -> expression_statement .)
    TYPEID          reduce using rule 28 (statement -> expression_statement .)
    ENUM            reduce using rule 28 (statement -> expression_statement .)
    STRUCT          reduce using rule 28 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 28 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 28 (statement -> expression_statement .)
    AND             reduce using rule 28 (statement -> expression_statement .)
    TIMES           reduce using rule 28 (statement -> expression_statement .)
    PLUS            reduce using rule 28 (statement -> expression_statement .)
    MINUS           reduce using rule 28 (statement -> expression_statement .)
    NOT             reduce using rule 28 (statement -> expression_statement .)
    LNOT            reduce using rule 28 (statement -> expression_statement .)
    LPAREN          reduce using rule 28 (statement -> expression_statement .)
    ID              reduce using rule 28 (statement -> expression_statement .)
    INT_CONST       reduce using rule 28 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 28 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 28 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 28 (statement -> expression_statement .)
    SEMI            reduce using rule 28 (statement -> expression_statement .)
    RBRACE          reduce using rule 28 (statement -> expression_statement .)
    ELSE            reduce using rule 28 (statement -> expression_statement .)


state 145

    (29) statement -> compound_statement .

    IF              reduce using rule 29 (statement -> compound_statement .)
    WHILE           reduce using rule 29 (statement -> compound_statement .)
    DO              reduce using rule 29 (statement -> compound_statement .)
    FOR             reduce using rule 29 (statement -> compound_statement .)
    BREAK           reduce using rule 29 (statement -> compound_statement .)
    CONTINUE        reduce using rule 29 (statement -> compound_statement .)
    RETURN          reduce using rule 29 (statement -> compound_statement .)
    AUTO            reduce using rule 29 (statement -> compound_statement .)
    REGISTER        reduce using rule 29 (statement -> compound_statement .)
    STATIC          reduce using rule 29 (statement -> compound_statement .)
    EXTERN          reduce using rule 29 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 29 (statement -> compound_statement .)
    CONST           reduce using rule 29 (statement -> compound_statement .)
    VOLATILE        reduce using rule 29 (statement -> compound_statement .)
    LBRACE          reduce using rule 29 (statement -> compound_statement .)
    VOID            reduce using rule 29 (statement -> compound_statement .)
    CHAR            reduce using rule 29 (statement -> compound_statement .)
    SHORT           reduce using rule 29 (statement -> compound_statement .)
    INT             reduce using rule 29 (statement -> compound_statement .)
    LONG            reduce using rule 29 (statement -> compound_statement .)
    FLOAT           reduce using rule 29 (statement -> compound_statement .)
    DOUBLE          reduce using rule 29 (statement -> compound_statement .)
    SIGNED          reduce using rule 29 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 29 (statement -> compound_statement .)
    TYPEID          reduce using rule 29 (statement -> compound_statement .)
    ENUM            reduce using rule 29 (statement -> compound_statement .)
    STRUCT          reduce using rule 29 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 29 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 29 (statement -> compound_statement .)
    AND             reduce using rule 29 (statement -> compound_statement .)
    TIMES           reduce using rule 29 (statement -> compound_statement .)
    PLUS            reduce using rule 29 (statement -> compound_statement .)
    MINUS           reduce using rule 29 (statement -> compound_statement .)
    NOT             reduce using rule 29 (statement -> compound_statement .)
    LNOT            reduce using rule 29 (statement -> compound_statement .)
    LPAREN          reduce using rule 29 (statement -> compound_statement .)
    ID              reduce using rule 29 (statement -> compound_statement .)
    INT_CONST       reduce using rule 29 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 29 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 29 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 29 (statement -> compound_statement .)
    SEMI            reduce using rule 29 (statement -> compound_statement .)
    RBRACE          reduce using rule 29 (statement -> compound_statement .)
    ELSE            reduce using rule 29 (statement -> compound_statement .)


state 146

    (30) statement -> selection_statement .

    IF              reduce using rule 30 (statement -> selection_statement .)
    WHILE           reduce using rule 30 (statement -> selection_statement .)
    DO              reduce using rule 30 (statement -> selection_statement .)
    FOR             reduce using rule 30 (statement -> selection_statement .)
    BREAK           reduce using rule 30 (statement -> selection_statement .)
    CONTINUE        reduce using rule 30 (statement -> selection_statement .)
    RETURN          reduce using rule 30 (statement -> selection_statement .)
    AUTO            reduce using rule 30 (statement -> selection_statement .)
    REGISTER        reduce using rule 30 (statement -> selection_statement .)
    STATIC          reduce using rule 30 (statement -> selection_statement .)
    EXTERN          reduce using rule 30 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 30 (statement -> selection_statement .)
    CONST           reduce using rule 30 (statement -> selection_statement .)
    VOLATILE        reduce using rule 30 (statement -> selection_statement .)
    LBRACE          reduce using rule 30 (statement -> selection_statement .)
    VOID            reduce using rule 30 (statement -> selection_statement .)
    CHAR            reduce using rule 30 (statement -> selection_statement .)
    SHORT           reduce using rule 30 (statement -> selection_statement .)
    INT             reduce using rule 30 (statement -> selection_statement .)
    LONG            reduce using rule 30 (statement -> selection_statement .)
    FLOAT           reduce using rule 30 (statement -> selection_statement .)
    DOUBLE          reduce using rule 30 (statement -> selection_statement .)
    SIGNED          reduce using rule 30 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 30 (statement -> selection_statement .)
    TYPEID          reduce using rule 30 (statement -> selection_statement .)
    ENUM            reduce using rule 30 (statement -> selection_statement .)
    STRUCT          reduce using rule 30 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 30 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 30 (statement -> selection_statement .)
    AND             reduce using rule 30 (statement -> selection_statement .)
    TIMES           reduce using rule 30 (statement -> selection_statement .)
    PLUS            reduce using rule 30 (statement -> selection_statement .)
    MINUS           reduce using rule 30 (statement -> selection_statement .)
    NOT             reduce using rule 30 (statement -> selection_statement .)
    LNOT            reduce using rule 30 (statement -> selection_statement .)
    LPAREN          reduce using rule 30 (statement -> selection_statement .)
    ID              reduce using rule 30 (statement -> selection_statement .)
    INT_CONST       reduce using rule 30 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 30 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 30 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 30 (statement -> selection_statement .)
    SEMI            reduce using rule 30 (statement -> selection_statement .)
    RBRACE          reduce using rule 30 (statement -> selection_statement .)
    ELSE            reduce using rule 30 (statement -> selection_statement .)


state 147

    (31) statement -> iteration_statement .

    IF              reduce using rule 31 (statement -> iteration_statement .)
    WHILE           reduce using rule 31 (statement -> iteration_statement .)
    DO              reduce using rule 31 (statement -> iteration_statement .)
    FOR             reduce using rule 31 (statement -> iteration_statement .)
    BREAK           reduce using rule 31 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 31 (statement -> iteration_statement .)
    RETURN          reduce using rule 31 (statement -> iteration_statement .)
    AUTO            reduce using rule 31 (statement -> iteration_statement .)
    REGISTER        reduce using rule 31 (statement -> iteration_statement .)
    STATIC          reduce using rule 31 (statement -> iteration_statement .)
    EXTERN          reduce using rule 31 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 31 (statement -> iteration_statement .)
    CONST           reduce using rule 31 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 31 (statement -> iteration_statement .)
    LBRACE          reduce using rule 31 (statement -> iteration_statement .)
    VOID            reduce using rule 31 (statement -> iteration_statement .)
    CHAR            reduce using rule 31 (statement -> iteration_statement .)
    SHORT           reduce using rule 31 (statement -> iteration_statement .)
    INT             reduce using rule 31 (statement -> iteration_statement .)
    LONG            reduce using rule 31 (statement -> iteration_statement .)
    FLOAT           reduce using rule 31 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 31 (statement -> iteration_statement .)
    SIGNED          reduce using rule 31 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 31 (statement -> iteration_statement .)
    TYPEID          reduce using rule 31 (statement -> iteration_statement .)
    ENUM            reduce using rule 31 (statement -> iteration_statement .)
    STRUCT          reduce using rule 31 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 31 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 31 (statement -> iteration_statement .)
    AND             reduce using rule 31 (statement -> iteration_statement .)
    TIMES           reduce using rule 31 (statement -> iteration_statement .)
    PLUS            reduce using rule 31 (statement -> iteration_statement .)
    MINUS           reduce using rule 31 (statement -> iteration_statement .)
    NOT             reduce using rule 31 (statement -> iteration_statement .)
    LNOT            reduce using rule 31 (statement -> iteration_statement .)
    LPAREN          reduce using rule 31 (statement -> iteration_statement .)
    ID              reduce using rule 31 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 31 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 31 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 31 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 31 (statement -> iteration_statement .)
    SEMI            reduce using rule 31 (statement -> iteration_statement .)
    RBRACE          reduce using rule 31 (statement -> iteration_statement .)
    ELSE            reduce using rule 31 (statement -> iteration_statement .)


state 148

    (32) statement -> jump_statement .

    IF              reduce using rule 32 (statement -> jump_statement .)
    WHILE           reduce using rule 32 (statement -> jump_statement .)
    DO              reduce using rule 32 (statement -> jump_statement .)
    FOR             reduce using rule 32 (statement -> jump_statement .)
    BREAK           reduce using rule 32 (statement -> jump_statement .)
    CONTINUE        reduce using rule 32 (statement -> jump_statement .)
    RETURN          reduce using rule 32 (statement -> jump_statement .)
    AUTO            reduce using rule 32 (statement -> jump_statement .)
    REGISTER        reduce using rule 32 (statement -> jump_statement .)
    STATIC          reduce using rule 32 (statement -> jump_statement .)
    EXTERN          reduce using rule 32 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 32 (statement -> jump_statement .)
    CONST           reduce using rule 32 (statement -> jump_statement .)
    VOLATILE        reduce using rule 32 (statement -> jump_statement .)
    LBRACE          reduce using rule 32 (statement -> jump_statement .)
    VOID            reduce using rule 32 (statement -> jump_statement .)
    CHAR            reduce using rule 32 (statement -> jump_statement .)
    SHORT           reduce using rule 32 (statement -> jump_statement .)
    INT             reduce using rule 32 (statement -> jump_statement .)
    LONG            reduce using rule 32 (statement -> jump_statement .)
    FLOAT           reduce using rule 32 (statement -> jump_statement .)
    DOUBLE          reduce using rule 32 (statement -> jump_statement .)
    SIGNED          reduce using rule 32 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 32 (statement -> jump_statement .)
    TYPEID          reduce using rule 32 (statement -> jump_statement .)
    ENUM            reduce using rule 32 (statement -> jump_statement .)
    STRUCT          reduce using rule 32 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 32 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 32 (statement -> jump_statement .)
    AND             reduce using rule 32 (statement -> jump_statement .)
    TIMES           reduce using rule 32 (statement -> jump_statement .)
    PLUS            reduce using rule 32 (statement -> jump_statement .)
    MINUS           reduce using rule 32 (statement -> jump_statement .)
    NOT             reduce using rule 32 (statement -> jump_statement .)
    LNOT            reduce using rule 32 (statement -> jump_statement .)
    LPAREN          reduce using rule 32 (statement -> jump_statement .)
    ID              reduce using rule 32 (statement -> jump_statement .)
    INT_CONST       reduce using rule 32 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 32 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 32 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 32 (statement -> jump_statement .)
    SEMI            reduce using rule 32 (statement -> jump_statement .)
    RBRACE          reduce using rule 32 (statement -> jump_statement .)
    ELSE            reduce using rule 32 (statement -> jump_statement .)


state 149

    (38) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 225


state 150

    (39) selection_statement -> IF . LPAREN expression RPAREN statement
    (40) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 226


state 151

    (10) expression_opt -> expression .
    (124) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 10 (expression_opt -> expression .)
    RPAREN          reduce using rule 10 (expression_opt -> expression .)
    COMMA           shift and go to state 227


state 152

    (41) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 228


state 153

    (42) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    statement                      shift and go to state 229
    expression                     shift and go to state 151
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    expression_opt                 shift and go to state 149
    brace_open                     shift and go to state 80
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 154

    (43) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 230


state 155

    (45) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 231


state 156

    (46) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 232


state 157

    (47) jump_statement -> RETURN . expression SEMI
    (48) jump_statement -> RETURN . SEMI
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    SEMI            shift and go to state 234
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 233
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 158

    (123) expression -> assignment_expression .

    COMMA           reduce using rule 123 (expression -> assignment_expression .)
    SEMI            reduce using rule 123 (expression -> assignment_expression .)
    RPAREN          reduce using rule 123 (expression -> assignment_expression .)
    COLON           reduce using rule 123 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 123 (expression -> assignment_expression .)


state 159

    (118) initializer -> brace_open initializer_list_opt . brace_close
    (190) brace_close -> . RBRACE

    RBRACE          shift and go to state 127

    brace_close                    shift and go to state 235

state 160

    (119) initializer -> brace_open initializer_list . COMMA brace_close
    (16) initializer_list_opt -> initializer_list .
    (121) initializer_list -> initializer_list . COMMA initializer

    COMMA           shift and go to state 236
    RBRACE          reduce using rule 16 (initializer_list_opt -> initializer_list .)


state 161

    (15) initializer_list_opt -> empty .

    RBRACE          reduce using rule 15 (initializer_list_opt -> empty .)


state 162

    (120) initializer_list -> initializer .

    COMMA           reduce using rule 120 (initializer_list -> initializer .)
    RBRACE          reduce using rule 120 (initializer_list -> initializer .)


state 163

    (126) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    unary_expression               shift and go to state 85
    assignment_expression          shift and go to state 237
    conditional_expression         shift and go to state 84
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 164

    (127) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 127 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 127 (assignment_operator -> EQUALS .)
    AND             reduce using rule 127 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 127 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 127 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 127 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 127 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 127 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 127 (assignment_operator -> EQUALS .)
    ID              reduce using rule 127 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 127 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 127 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 127 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 127 (assignment_operator -> EQUALS .)


state 165

    (128) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 128 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 128 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 128 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 128 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 128 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 128 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 128 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 128 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 128 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 128 (assignment_operator -> XOREQUAL .)
    INT_CONST       reduce using rule 128 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 128 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 128 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 128 (assignment_operator -> XOREQUAL .)


state 166

    (129) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    INT_CONST       reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 129 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 129 (assignment_operator -> TIMESEQUAL .)


state 167

    (130) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    INT_CONST       reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 130 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 130 (assignment_operator -> DIVEQUAL .)


state 168

    (131) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 131 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 131 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 131 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 131 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 131 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 131 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 131 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 131 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 131 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 131 (assignment_operator -> MODEQUAL .)
    INT_CONST       reduce using rule 131 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 131 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 131 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 131 (assignment_operator -> MODEQUAL .)


state 169

    (132) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    INT_CONST       reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 132 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 132 (assignment_operator -> PLUSEQUAL .)


state 170

    (133) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    INT_CONST       reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 133 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 133 (assignment_operator -> MINUSEQUAL .)


state 171

    (134) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST       reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 134 (assignment_operator -> LSHIFTEQUAL .)


state 172

    (135) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST       reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 135 (assignment_operator -> RSHIFTEQUAL .)


state 173

    (136) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    INT_CONST       reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 136 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 136 (assignment_operator -> ANDEQUAL .)


state 174

    (137) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 137 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 137 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 137 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 137 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 137 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 137 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 137 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 137 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 137 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 137 (assignment_operator -> OREQUAL .)
    INT_CONST       reduce using rule 137 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 137 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 137 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 137 (assignment_operator -> OREQUAL .)


state 175

    (139) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 86
    expression                     shift and go to state 238
    conditional_expression         shift and go to state 84
    assignment_expression          shift and go to state 158
    unary_expression               shift and go to state 85
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 176

    (141) binary_expression -> binary_expression TIMES . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 239
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 177

    (142) binary_expression -> binary_expression DIVIDE . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 240
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 178

    (143) binary_expression -> binary_expression MOD . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 241
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 179

    (144) binary_expression -> binary_expression PLUS . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 242
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 180

    (145) binary_expression -> binary_expression MINUS . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 243
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 181

    (146) binary_expression -> binary_expression LSHIFT . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 244
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 182

    (147) binary_expression -> binary_expression RSHIFT . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 245
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 183

    (148) binary_expression -> binary_expression GT . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 246
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 184

    (149) binary_expression -> binary_expression GE . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 247
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 185

    (150) binary_expression -> binary_expression LT . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 248
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 186

    (151) binary_expression -> binary_expression LE . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 249
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 187

    (152) binary_expression -> binary_expression EQ . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 250
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 188

    (153) binary_expression -> binary_expression NE . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 251
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 189

    (154) binary_expression -> binary_expression AND . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 252
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 190

    (155) binary_expression -> binary_expression XOR . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 253
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 191

    (156) binary_expression -> binary_expression OR . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 254
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 192

    (157) binary_expression -> binary_expression LAND . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 255
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 193

    (158) binary_expression -> binary_expression LOR . binary_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 256
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 194

    (173) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    postfix_expression             shift and go to state 87
    expression                     shift and go to state 257
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 195

    (174) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (175) postfix_expression -> postfix_expression LPAREN . RPAREN
    (170) argument_expression_list -> . assignment_expression
    (171) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RPAREN          shift and go to state 259
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    postfix_expression             shift and go to state 87
    argument_expression_list       shift and go to state 258
    assignment_expression          shift and go to state 260
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 196

    (176) postfix_expression -> postfix_expression PERIOD . identifier
    (184) identifier -> . ID

    ID              shift and go to state 103

    identifier                     shift and go to state 261

state 197

    (177) postfix_expression -> postfix_expression ARROW . identifier
    (184) identifier -> . ID

    ID              shift and go to state 103

    identifier                     shift and go to state 262

state 198

    (178) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 178 (postfix_expression -> postfix_expression PLUSPLUS .)


state 199

    (179) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 179 (postfix_expression -> postfix_expression MINUSMINUS .)


state 200

    (161) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 161 (unary_expression -> PLUSPLUS unary_expression .)


state 201

    (162) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 162 (unary_expression -> MINUSMINUS unary_expression .)


state 202

    (163) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 163 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 163 (unary_expression -> unary_operator cast_expression .)


state 203

    (159) cast_expression -> unary_expression .

    EQUALS          reduce using rule 159 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 159 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 159 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 159 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 159 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 159 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 159 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 159 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 159 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 159 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 159 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 159 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 159 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 159 (cast_expression -> unary_expression .)
    MOD             reduce using rule 159 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 159 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 159 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 159 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 159 (cast_expression -> unary_expression .)
    GT              reduce using rule 159 (cast_expression -> unary_expression .)
    GE              reduce using rule 159 (cast_expression -> unary_expression .)
    LT              reduce using rule 159 (cast_expression -> unary_expression .)
    LE              reduce using rule 159 (cast_expression -> unary_expression .)
    EQ              reduce using rule 159 (cast_expression -> unary_expression .)
    NE              reduce using rule 159 (cast_expression -> unary_expression .)
    AND             reduce using rule 159 (cast_expression -> unary_expression .)
    XOR             reduce using rule 159 (cast_expression -> unary_expression .)
    OR              reduce using rule 159 (cast_expression -> unary_expression .)
    LAND            reduce using rule 159 (cast_expression -> unary_expression .)
    LOR             reduce using rule 159 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 159 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 159 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 159 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 159 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 159 (cast_expression -> unary_expression .)
    COLON           reduce using rule 159 (cast_expression -> unary_expression .)


state 204

    (183) primary_expression -> LPAREN expression . RPAREN
    (124) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 263
    COMMA           shift and go to state 227


state 205

    (58) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 264


state 206

    (1) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 1 (assignment_expression_opt -> empty .)


state 207

    (2) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 2 (assignment_expression_opt -> assignment_expression .)


state 208

    (59) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list . assignment_expression RBRACKET
    (75) type_qualifier_list -> type_qualifier_list . type_qualifier
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    assignment_expression          shift and go to state 265
    type_qualifier                 shift and go to state 123
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 209

    (60) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    assignment_expression          shift and go to state 266
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 210

    (61) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 61 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 211

    (62) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 62 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 212

    (64) identifier_list -> identifier_list COMMA . identifier
    (184) identifier -> . ID

    ID              shift and go to state 103

    identifier                     shift and go to state 267

state 213

    (67) parameter_list -> parameter_list COMMA . parameter_declaration
    (68) parameter_declaration -> . declaration_specifiers declarator
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close

    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32

    parameter_declaration          shift and go to state 268
    declaration_specifiers         shift and go to state 120
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18

state 214

    (68) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 68 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 68 (parameter_declaration -> declaration_specifiers declarator .)


state 215

    (98) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .

    AUTO            reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CONST           reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 98 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 216

    (101) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 101 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 101 (enumerator_list -> enumerator_list COMMA enumerator .)


state 217

    (103) enumerator -> ID EQUALS constant_expression .

    COMMA           reduce using rule 103 (enumerator -> ID EQUALS constant_expression .)
    RBRACE          reduce using rule 103 (enumerator -> ID EQUALS constant_expression .)


state 218

    (122) constant_expression -> conditional_expression .

    COMMA           reduce using rule 122 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 122 (constant_expression -> conditional_expression .)


state 219

    (106) struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .

    AUTO            reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    CONST           reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 106 (struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close .)


state 220

    (109) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .

    RBRACE          reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOID            reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CHAR            reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SHORT           reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    INT             reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    LONG            reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    FLOAT           reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    DOUBLE          reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    SIGNED          reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    UNSIGNED        reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    TYPEID          reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    ENUM            reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    STRUCT          reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    CONST           reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)
    VOLATILE        reduce using rule 109 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI .)


state 221

    (115) struct_declarator_list -> struct_declarator COMMA . struct_declarator
    (116) struct_declarator -> . declarator
    (54) declarator -> . direct_declarator
    (55) declarator -> . pointer direct_declarator
    (56) direct_declarator -> . ID
    (57) direct_declarator -> . LPAREN declarator RPAREN
    (58) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (59) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET
    (60) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (61) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (62) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (72) pointer -> . TIMES type_qualifier_list_opt
    (73) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 39
    LPAREN          shift and go to state 40
    TIMES           shift and go to state 41

    struct_declarator              shift and go to state 269
    declarator                     shift and go to state 136
    direct_declarator              shift and go to state 36
    pointer                        shift and go to state 37

state 222

    (33) compound_statement -> brace_open block_item_list_opt brace_close .

    AUTO            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ID              reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST       reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SEMI            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 33 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 223

    (35) block_item_list -> block_item_list block_item .

    IF              reduce using rule 35 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 35 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 35 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 35 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 35 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 35 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 35 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 35 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 35 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 35 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 35 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 35 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 35 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 35 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 35 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 35 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 35 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 35 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 35 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 35 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 35 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 35 (block_item_list -> block_item_list block_item .)


state 224

    (9) expression_opt -> empty .

    SEMI            reduce using rule 9 (expression_opt -> empty .)
    RPAREN          reduce using rule 9 (expression_opt -> empty .)


state 225

    (38) expression_statement -> expression_opt SEMI .

    IF              reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 38 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 38 (expression_statement -> expression_opt SEMI .)


state 226

    (39) selection_statement -> IF LPAREN . expression RPAREN statement
    (40) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 270
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 227

    (124) expression -> expression COMMA . assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    assignment_expression          shift and go to state 271
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 228

    (41) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 272
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 229

    (42) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 273


state 230

    (43) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (49) declaration -> . declaration_specifiers init_declarator_list SEMI
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (69) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (70) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (71) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) storage_class_specifier -> . AUTO
    (79) storage_class_specifier -> . REGISTER
    (80) storage_class_specifier -> . STATIC
    (81) storage_class_specifier -> . EXTERN
    (82) storage_class_specifier -> . TYPEDEF
    (83) type_specifier -> . type_specifier_simple
    (84) type_specifier -> . enum_specifier
    (85) type_specifier -> . struct_specifier
    (76) type_qualifier -> . CONST
    (77) type_qualifier -> . VOLATILE
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (86) type_specifier_simple -> . VOID
    (87) type_specifier_simple -> . CHAR
    (88) type_specifier_simple -> . SHORT
    (89) type_specifier_simple -> . INT
    (90) type_specifier_simple -> . LONG
    (91) type_specifier_simple -> . FLOAT
    (92) type_specifier_simple -> . DOUBLE
    (93) type_specifier_simple -> . SIGNED
    (94) type_specifier_simple -> . UNSIGNED
    (95) type_specifier_simple -> . TYPEID
    (96) enum_specifier -> . ENUM ID
    (97) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (98) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (104) struct_specifier -> . STRUCT ID
    (105) struct_specifier -> . STRUCT brace_open struct_declaration_list brace_close
    (106) struct_specifier -> . STRUCT ID brace_open struct_declaration_list brace_close
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    SEMI            reduce using rule 191 (empty -> .)
    AUTO            shift and go to state 11
    REGISTER        shift and go to state 12
    STATIC          shift and go to state 13
    EXTERN          shift and go to state 14
    TYPEDEF         shift and go to state 15
    CONST           shift and go to state 19
    VOLATILE        shift and go to state 20
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    VOID            shift and go to state 21
    CHAR            shift and go to state 22
    SHORT           shift and go to state 23
    INT             shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    SIGNED          shift and go to state 28
    UNSIGNED        shift and go to state 29
    TYPEID          shift and go to state 30
    ENUM            shift and go to state 31
    STRUCT          shift and go to state 32
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 274
    declaration                    shift and go to state 275
    empty                          shift and go to state 224
    expression                     shift and go to state 151
    declaration_specifiers         shift and go to state 52
    assignment_expression          shift and go to state 158
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    type_specifier_simple          shift and go to state 16
    enum_specifier                 shift and go to state 17
    struct_specifier               shift and go to state 18
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 231

    (45) jump_statement -> BREAK SEMI .

    IF              reduce using rule 45 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 45 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 45 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 45 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 45 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 45 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 45 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 45 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 45 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 45 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 45 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 45 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 45 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 45 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 45 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 45 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 45 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 45 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 45 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 45 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 45 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 45 (jump_statement -> BREAK SEMI .)


state 232

    (46) jump_statement -> CONTINUE SEMI .

    IF              reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    ID              reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    INT_CONST       reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 46 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 46 (jump_statement -> CONTINUE SEMI .)


state 233

    (47) jump_statement -> RETURN expression . SEMI
    (124) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 276
    COMMA           shift and go to state 227


state 234

    (48) jump_statement -> RETURN SEMI .

    IF              reduce using rule 48 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 48 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 48 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 48 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 48 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 48 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 48 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 48 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 48 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 48 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 48 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 48 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 48 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 48 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 48 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 48 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 48 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 48 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 48 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 48 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 48 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 48 (jump_statement -> RETURN SEMI .)


state 235

    (118) initializer -> brace_open initializer_list_opt brace_close .

    SEMI            reduce using rule 118 (initializer -> brace_open initializer_list_opt brace_close .)
    COMMA           reduce using rule 118 (initializer -> brace_open initializer_list_opt brace_close .)
    RBRACE          reduce using rule 118 (initializer -> brace_open initializer_list_opt brace_close .)


state 236

    (119) initializer -> brace_open initializer_list COMMA . brace_close
    (121) initializer_list -> initializer_list COMMA . initializer
    (190) brace_close -> . RBRACE
    (117) initializer -> . assignment_expression
    (118) initializer -> . brace_open initializer_list_opt brace_close
    (119) initializer -> . brace_open initializer_list COMMA brace_close
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (189) brace_open -> . LBRACE
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RBRACE          shift and go to state 127
    LBRACE          shift and go to state 49
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    brace_open                     shift and go to state 83
    brace_close                    shift and go to state 277
    initializer                    shift and go to state 278
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 237

    (126) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 126 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 238

    (139) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (124) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 279
    COMMA           shift and go to state 227


state 239

    (141) binary_expression -> binary_expression TIMES binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    TIMES           reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 141 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 176 ]
  ! DIVIDE          [ shift and go to state 177 ]
  ! MOD             [ shift and go to state 178 ]
  ! PLUS            [ shift and go to state 179 ]
  ! MINUS           [ shift and go to state 180 ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 240

    (142) binary_expression -> binary_expression DIVIDE binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    TIMES           reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 142 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 176 ]
  ! DIVIDE          [ shift and go to state 177 ]
  ! MOD             [ shift and go to state 178 ]
  ! PLUS            [ shift and go to state 179 ]
  ! MINUS           [ shift and go to state 180 ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 241

    (143) binary_expression -> binary_expression MOD binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    TIMES           reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 143 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 176 ]
  ! DIVIDE          [ shift and go to state 177 ]
  ! MOD             [ shift and go to state 178 ]
  ! PLUS            [ shift and go to state 179 ]
  ! MINUS           [ shift and go to state 180 ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 242

    (144) binary_expression -> binary_expression PLUS binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    PLUS            reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178

  ! TIMES           [ reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 144 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 179 ]
  ! MINUS           [ shift and go to state 180 ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 243

    (145) binary_expression -> binary_expression MINUS binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    PLUS            reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178

  ! TIMES           [ reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 145 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 179 ]
  ! MINUS           [ shift and go to state 180 ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 244

    (146) binary_expression -> binary_expression LSHIFT binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RSHIFT          reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180

  ! TIMES           [ reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 146 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 245

    (147) binary_expression -> binary_expression RSHIFT binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RSHIFT          reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180

  ! TIMES           [ reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 147 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! LSHIFT          [ shift and go to state 181 ]
  ! RSHIFT          [ shift and go to state 182 ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 246

    (148) binary_expression -> binary_expression GT binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    LT              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182

  ! TIMES           [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 148 (binary_expression -> binary_expression GT binary_expression .) ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 247

    (149) binary_expression -> binary_expression GE binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    LT              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182

  ! TIMES           [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 149 (binary_expression -> binary_expression GE binary_expression .) ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 248

    (150) binary_expression -> binary_expression LT binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    LT              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182

  ! TIMES           [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 150 (binary_expression -> binary_expression LT binary_expression .) ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 249

    (151) binary_expression -> binary_expression LE binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    LT              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182

  ! TIMES           [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 151 (binary_expression -> binary_expression LE binary_expression .) ]
  ! GT              [ shift and go to state 183 ]
  ! GE              [ shift and go to state 184 ]
  ! LT              [ shift and go to state 185 ]
  ! LE              [ shift and go to state 186 ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 250

    (152) binary_expression -> binary_expression EQ binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    EQ              reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186

  ! TIMES           [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 152 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 251

    (153) binary_expression -> binary_expression NE binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    EQ              reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186

  ! TIMES           [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 153 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 187 ]
  ! NE              [ shift and go to state 188 ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 252

    (154) binary_expression -> binary_expression AND binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188

  ! TIMES           [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 154 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 189 ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 253

    (155) binary_expression -> binary_expression XOR binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    OR              reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188
    AND             shift and go to state 189

  ! TIMES           [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 155 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! XOR             [ shift and go to state 190 ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 254

    (156) binary_expression -> binary_expression OR binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    OR              reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188
    AND             shift and go to state 189
    XOR             shift and go to state 190

  ! TIMES           [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 156 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 191 ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 255

    (157) binary_expression -> binary_expression LAND binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    LAND            reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188
    AND             shift and go to state 189
    XOR             shift and go to state 190
    OR              shift and go to state 191

  ! TIMES           [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 157 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 192 ]
  ! LOR             [ shift and go to state 193 ]


state 256

    (158) binary_expression -> binary_expression LOR binary_expression .
    (141) binary_expression -> binary_expression . TIMES binary_expression
    (142) binary_expression -> binary_expression . DIVIDE binary_expression
    (143) binary_expression -> binary_expression . MOD binary_expression
    (144) binary_expression -> binary_expression . PLUS binary_expression
    (145) binary_expression -> binary_expression . MINUS binary_expression
    (146) binary_expression -> binary_expression . LSHIFT binary_expression
    (147) binary_expression -> binary_expression . RSHIFT binary_expression
    (148) binary_expression -> binary_expression . GT binary_expression
    (149) binary_expression -> binary_expression . GE binary_expression
    (150) binary_expression -> binary_expression . LT binary_expression
    (151) binary_expression -> binary_expression . LE binary_expression
    (152) binary_expression -> binary_expression . EQ binary_expression
    (153) binary_expression -> binary_expression . NE binary_expression
    (154) binary_expression -> binary_expression . AND binary_expression
    (155) binary_expression -> binary_expression . XOR binary_expression
    (156) binary_expression -> binary_expression . OR binary_expression
    (157) binary_expression -> binary_expression . LAND binary_expression
    (158) binary_expression -> binary_expression . LOR binary_expression

    CONDOP          reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    LOR             reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 176
    DIVIDE          shift and go to state 177
    MOD             shift and go to state 178
    PLUS            shift and go to state 179
    MINUS           shift and go to state 180
    LSHIFT          shift and go to state 181
    RSHIFT          shift and go to state 182
    GT              shift and go to state 183
    GE              shift and go to state 184
    LT              shift and go to state 185
    LE              shift and go to state 186
    EQ              shift and go to state 187
    NE              shift and go to state 188
    AND             shift and go to state 189
    XOR             shift and go to state 190
    OR              shift and go to state 191
    LAND            shift and go to state 192

  ! TIMES           [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 158 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 193 ]


state 257

    (173) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (124) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 280
    COMMA           shift and go to state 227


state 258

    (174) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (171) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 281
    COMMA           shift and go to state 282


state 259

    (175) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 175 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 260

    (170) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 170 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 170 (argument_expression_list -> assignment_expression .)


state 261

    (176) postfix_expression -> postfix_expression PERIOD identifier .

    LBRACKET        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LPAREN          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    PERIOD          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    ARROW           reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSPLUS        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSMINUS      reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQUALS          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOREQUAL        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMESEQUAL      reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVEQUAL        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    MODEQUAL        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUSEQUAL       reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUSEQUAL      reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFTEQUAL     reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFTEQUAL     reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    ANDEQUAL        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    OREQUAL         reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    CONDOP          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    TIMES           reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    DIVIDE          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    MOD             reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    PLUS            reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    MINUS           reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LSHIFT          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    RSHIFT          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    GT              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    GE              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LT              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LE              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    EQ              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    NE              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    AND             reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    XOR             reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    OR              reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LAND            reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    LOR             reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    SEMI            reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    COMMA           reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACE          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    RPAREN          reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    RBRACKET        reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)
    COLON           reduce using rule 176 (postfix_expression -> postfix_expression PERIOD identifier .)


state 262

    (177) postfix_expression -> postfix_expression ARROW identifier .

    LBRACKET        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LPAREN          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    PERIOD          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    ARROW           reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSPLUS        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSMINUS      reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    EQUALS          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    XOREQUAL        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMESEQUAL      reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVEQUAL        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    MODEQUAL        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUSEQUAL       reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUSEQUAL      reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFTEQUAL     reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFTEQUAL     reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    ANDEQUAL        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    OREQUAL         reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    CONDOP          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    TIMES           reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    DIVIDE          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    MOD             reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    PLUS            reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    MINUS           reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LSHIFT          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    RSHIFT          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    GT              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    GE              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LT              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LE              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    EQ              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    NE              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    AND             reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    XOR             reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    OR              reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LAND            reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    LOR             reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    SEMI            reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    COMMA           reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACE          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    RPAREN          reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    RBRACKET        reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)
    COLON           reduce using rule 177 (postfix_expression -> postfix_expression ARROW identifier .)


state 263

    (183) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 183 (primary_expression -> LPAREN expression RPAREN .)


state 264

    (58) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT             reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 58 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 265

    (59) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression . RBRACKET

    RBRACKET        shift and go to state 283


state 266

    (60) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 284


state 267

    (64) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 64 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 64 (identifier_list -> identifier_list COMMA identifier .)


state 268

    (67) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 67 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 67 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 269

    (115) struct_declarator_list -> struct_declarator COMMA struct_declarator .

    SEMI            reduce using rule 115 (struct_declarator_list -> struct_declarator COMMA struct_declarator .)


state 270

    (39) selection_statement -> IF LPAREN expression . RPAREN statement
    (40) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (124) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 285
    COMMA           shift and go to state 227


state 271

    (124) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 124 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 124 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 124 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 124 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 124 (expression -> expression COMMA assignment_expression .)


state 272

    (41) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (124) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 286
    COMMA           shift and go to state 227


state 273

    (42) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 287


state 274

    (43) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 288


state 275

    (44) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 289
    empty                          shift and go to state 224
    expression                     shift and go to state 151
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 276

    (47) jump_statement -> RETURN expression SEMI .

    IF              reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 47 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 47 (jump_statement -> RETURN expression SEMI .)


state 277

    (119) initializer -> brace_open initializer_list COMMA brace_close .

    SEMI            reduce using rule 119 (initializer -> brace_open initializer_list COMMA brace_close .)
    COMMA           reduce using rule 119 (initializer -> brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 119 (initializer -> brace_open initializer_list COMMA brace_close .)


state 278

    (121) initializer_list -> initializer_list COMMA initializer .

    COMMA           reduce using rule 121 (initializer_list -> initializer_list COMMA initializer .)
    RBRACE          reduce using rule 121 (initializer_list -> initializer_list COMMA initializer .)


state 279

    (139) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (159) cast_expression -> . unary_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    binary_expression              shift and go to state 86
    conditional_expression         shift and go to state 290
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 280

    (173) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 173 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 281

    (174) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 174 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 282

    (171) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    assignment_expression          shift and go to state 291
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 283

    (59) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .

    LBRACKET        reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LPAREN          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EQUALS          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    AUTO            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    REGISTER        reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STATIC          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    EXTERN          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CONST           reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    VOID            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    CHAR            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SHORT           reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    INT             reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LONG            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    FLOAT           reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SIGNED          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    TYPEID          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    ENUM            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    STRUCT          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    LBRACE          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    SEMI            reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    COMMA           reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)
    RPAREN          reduce using rule 59 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET .)


state 284

    (60) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 60 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 285

    (39) selection_statement -> IF LPAREN expression RPAREN . statement
    (40) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 151
    statement                      shift and go to state 292
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    expression_opt                 shift and go to state 149
    brace_open                     shift and go to state 80
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 286

    (41) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 151
    statement                      shift and go to state 293
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    expression_opt                 shift and go to state 149
    brace_open                     shift and go to state 80
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 287

    (42) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 294
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 288

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 295
    empty                          shift and go to state 224
    expression                     shift and go to state 151
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 289

    (44) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 296


state 290

    (139) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    SEMI            reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COLON           reduce using rule 139 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 291

    (171) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 171 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 171 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 292

    (39) selection_statement -> IF LPAREN expression RPAREN statement .
    (40) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 297

  ! ELSE            [ reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 293

    (41) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    IF              reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 41 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 294

    (42) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (124) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 298
    COMMA           shift and go to state 227


state 295

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 299


state 296

    (44) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RPAREN          reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 300
    empty                          shift and go to state 224
    expression                     shift and go to state 151
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 297

    (40) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression                     shift and go to state 151
    statement                      shift and go to state 301
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    expression_opt                 shift and go to state 149
    brace_open                     shift and go to state 80
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 298

    (42) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 302


state 299

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    RPAREN          reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 303
    empty                          shift and go to state 224
    expression                     shift and go to state 151
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 300

    (44) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 304


state 301

    (40) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    IF              reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 40 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 302

    (42) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    IF              reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST       reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 42 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 303

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 305


state 304

    (44) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 149
    statement                      shift and go to state 306
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    brace_open                     shift and go to state 80
    expression                     shift and go to state 151
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 305

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (28) statement -> . expression_statement
    (29) statement -> . compound_statement
    (30) statement -> . selection_statement
    (31) statement -> . iteration_statement
    (32) statement -> . jump_statement
    (38) expression_statement -> . expression_opt SEMI
    (33) compound_statement -> . brace_open block_item_list_opt brace_close
    (39) selection_statement -> . IF LPAREN expression RPAREN statement
    (40) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (41) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (42) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (43) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (44) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (45) jump_statement -> . BREAK SEMI
    (46) jump_statement -> . CONTINUE SEMI
    (47) jump_statement -> . RETURN expression SEMI
    (48) jump_statement -> . RETURN SEMI
    (9) expression_opt -> . empty
    (10) expression_opt -> . expression
    (189) brace_open -> . LBRACE
    (191) empty -> .
    (123) expression -> . assignment_expression
    (124) expression -> . expression COMMA assignment_expression
    (125) assignment_expression -> . conditional_expression
    (126) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (138) conditional_expression -> . binary_expression
    (139) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (160) unary_expression -> . postfix_expression
    (161) unary_expression -> . PLUSPLUS unary_expression
    (162) unary_expression -> . MINUSMINUS unary_expression
    (163) unary_expression -> . unary_operator cast_expression
    (140) binary_expression -> . cast_expression
    (141) binary_expression -> . binary_expression TIMES binary_expression
    (142) binary_expression -> . binary_expression DIVIDE binary_expression
    (143) binary_expression -> . binary_expression MOD binary_expression
    (144) binary_expression -> . binary_expression PLUS binary_expression
    (145) binary_expression -> . binary_expression MINUS binary_expression
    (146) binary_expression -> . binary_expression LSHIFT binary_expression
    (147) binary_expression -> . binary_expression RSHIFT binary_expression
    (148) binary_expression -> . binary_expression GT binary_expression
    (149) binary_expression -> . binary_expression GE binary_expression
    (150) binary_expression -> . binary_expression LT binary_expression
    (151) binary_expression -> . binary_expression LE binary_expression
    (152) binary_expression -> . binary_expression EQ binary_expression
    (153) binary_expression -> . binary_expression NE binary_expression
    (154) binary_expression -> . binary_expression AND binary_expression
    (155) binary_expression -> . binary_expression XOR binary_expression
    (156) binary_expression -> . binary_expression OR binary_expression
    (157) binary_expression -> . binary_expression LAND binary_expression
    (158) binary_expression -> . binary_expression LOR binary_expression
    (172) postfix_expression -> . primary_expression
    (173) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (174) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (175) postfix_expression -> . postfix_expression LPAREN RPAREN
    (176) postfix_expression -> . postfix_expression PERIOD identifier
    (177) postfix_expression -> . postfix_expression ARROW identifier
    (178) postfix_expression -> . postfix_expression PLUSPLUS
    (179) postfix_expression -> . postfix_expression MINUSMINUS
    (164) unary_operator -> . AND
    (165) unary_operator -> . TIMES
    (166) unary_operator -> . PLUS
    (167) unary_operator -> . MINUS
    (168) unary_operator -> . NOT
    (169) unary_operator -> . LNOT
    (159) cast_expression -> . unary_expression
    (180) primary_expression -> . identifier
    (181) primary_expression -> . constant
    (182) primary_expression -> . string_literal
    (183) primary_expression -> . LPAREN expression RPAREN
    (184) identifier -> . ID
    (185) constant -> . INT_CONST
    (186) constant -> . FLOAT_CONST
    (187) constant -> . CHAR_CONST
    (188) string_literal -> . STRING_LITERAL

    IF              shift and go to state 150
    WHILE           shift and go to state 152
    DO              shift and go to state 153
    FOR             shift and go to state 154
    BREAK           shift and go to state 155
    CONTINUE        shift and go to state 156
    RETURN          shift and go to state 157
    LBRACE          shift and go to state 49
    SEMI            reduce using rule 191 (empty -> .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89
    AND             shift and go to state 95
    TIMES           shift and go to state 92
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94
    NOT             shift and go to state 99
    LNOT            shift and go to state 100
    LPAREN          shift and go to state 97
    ID              shift and go to state 103
    INT_CONST       shift and go to state 104
    FLOAT_CONST     shift and go to state 105
    CHAR_CONST      shift and go to state 106
    STRING_LITERAL  shift and go to state 107

    expression_opt                 shift and go to state 149
    statement                      shift and go to state 307
    expression_statement           shift and go to state 144
    compound_statement             shift and go to state 145
    selection_statement            shift and go to state 146
    iteration_statement            shift and go to state 147
    jump_statement                 shift and go to state 148
    brace_open                     shift and go to state 80
    expression                     shift and go to state 151
    empty                          shift and go to state 224
    assignment_expression          shift and go to state 158
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    binary_expression              shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 96
    identifier                     shift and go to state 98
    constant                       shift and go to state 101
    string_literal                 shift and go to state 102

state 306

    (44) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    IF              reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 44 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 307

    (43) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    IF              reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 43 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 292 resolved as shift
