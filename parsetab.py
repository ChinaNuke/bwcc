
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'translation_unit_or_emptyleftLORleftLANDleftORleftXORleftANDleftEQNEleftGTGELTLEleftRSHIFTLSHIFTleftPLUSMINUSleftTIMESDIVIDEMODAND ANDEQUAL ARROW AUTO BREAK CHAR CHAR_CONST COLON COMMA CONDOP CONST CONTINUE DIVEQUAL DIVIDE DO DOUBLE ELSE ENUM EQ EQUALS EXTERN FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LAND LBRACE LBRACKET LE LNOT LONG LOR LPAREN LSHIFT LSHIFTEQUAL LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR OREQUAL PERIOD PLUS PLUSEQUAL PLUSPLUS RBRACE RBRACKET REGISTER RETURN RPAREN RSHIFT RSHIFTEQUAL SEMI SHORT SIGNED STATIC STRING_LITERAL STRUCT TIMES TIMESEQUAL TYPEDEF TYPEID UNSIGNED VOID VOLATILE WHILE XOR XOREQUALassignment_expression_opt : empty\n| assignment_expressionblock_item_list_opt : empty\n| block_item_listdeclaration_list_opt : empty\n| declaration_listdeclaration_specifiers_opt : empty\n| declaration_specifiersexpression_opt : empty\n| expressionidentifier_list_opt : empty\n| identifier_listinit_declarator_list_opt : empty\n| init_declarator_listinitializer_list_opt : empty\n| initializer_listtype_qualifier_list_opt : empty\n| type_qualifier_list translation_unit_or_empty   : translation_unit\n                                        | empty\n         translation_unit    : external_declaration\n                                | translation_unit external_declaration\n         external_declaration    : function_defination  external_declaration    : declaration  function_defination     : declaration_specifiers declarator declaration_list_opt compound_statement\n         declaration_list    : declaration\n                                | declaration_list declaration\n         statement   : expression_statement\n                        | compound_statement\n                        | selection_statement\n                        | iteration_statement\n                        | jump_statement\n         compound_statement  : brace_open block_item_list_opt brace_close  block_item_list : block_item\n                            | block_item_list block_item\n         block_item  : declaration\n                        | statement\n         expression_statement    : expression_opt SEMI  selection_statement : IF LPAREN expression RPAREN statement  selection_statement : IF LPAREN expression RPAREN statement ELSE statement  iteration_statement : WHILE LPAREN expression RPAREN statement  iteration_statement : DO statement WHILE LPAREN expression RPAREN SEMI  iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement  iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement  jump_statement  : BREAK SEMI  jump_statement  : CONTINUE SEMI  jump_statement  : RETURN expression SEMI\n                            | RETURN SEMI\n         declaration : declaration_specifiers init_declarator_list SEMI  init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         declarator  : direct_declarator\n                        | pointer direct_declarator\n         direct_declarator   : ID  direct_declarator   : LPAREN declarator RPAREN  direct_declarator   : direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET  direct_declarator   : direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET\n                                | direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET\n         direct_declarator   : direct_declarator LPAREN identifier_list_opt RPAREN\n                                | direct_declarator LPAREN parameter_type_list RPAREN\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         parameter_type_list : parameter_list  parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         parameter_declaration   : declaration_specifiers declarator\n         declaration_specifiers  : storage_class_specifier declaration_specifiers_opt  declaration_specifiers  : type_specifier declaration_specifiers_opt  declaration_specifiers  : type_qualifier declaration_specifiers_opt  pointer : TIMES type_qualifier_list_opt\n                    | TIMES type_qualifier_list_opt pointer\n         type_qualifier_list : type_qualifier\n                                | type_qualifier_list type_qualifier\n         type_qualifier  : CONST\n                            | VOLATILE\n         storage_class_specifier : AUTO\n                                    | REGISTER\n                                    | STATIC\n                                    | EXTERN\n                                    | TYPEDEF\n         type_specifier  : type_specifier_simple\n                            | enum_specifier\n                            | struct_specifier\n         type_specifier_simple       : VOID\n                                        | CHAR\n                                        | SHORT\n                                        | INT\n                                        | LONG\n                                        | FLOAT\n                                        | DOUBLE\n                                        | SIGNED\n                                        | UNSIGNED\n                                        | TYPEID\n         enum_specifier  : ENUM ID  enum_specifier  : ENUM brace_open enumerator_list brace_close\n         enum_specifier  : ENUM ID brace_open enumerator_list brace_close\n         enumerator_list : enumerator\n                            | enumerator_list COMMA\n                            | enumerator_list COMMA enumerator\n         enumerator  : ID\n                        | ID EQUALS constant_expression\n         struct_specifier    : STRUCT ID\n         struct_specifier    : STRUCT brace_open struct_declaration_list brace_close\n         struct_specifier    : STRUCT ID brace_open struct_declaration_list brace_close\n         struct_declaration_list : struct_declaration\n                                    | struct_declaration_list struct_declaration\n         struct_declaration  : specifier_qualifier_list struct_declarator_list SEMI\n         specifier_qualifier_list    : specifier_qualifier_list type_specifier  specifier_qualifier_list    : specifier_qualifier_list type_qualifier  specifier_qualifier_list    : type_specifier  specifier_qualifier_list    : type_qualifier_list type_specifier  struct_declarator_list  : struct_declarator\n                                    | struct_declarator COMMA struct_declarator\n         struct_declarator   : declarator  initializer : assignment_expression  initializer : brace_open initializer_list_opt brace_close\n                        | brace_open initializer_list COMMA brace_close\n         initializer_list    : initializer\n                                | initializer_list COMMA initializer\n         constant_expression : conditional_expression  expression  : assignment_expression\n                        | expression COMMA assignment_expression\n         assignment_expression   : conditional_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | XOREQUAL\n                                | TIMESEQUAL\n                                | DIVEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n                                | LSHIFTEQUAL\n                                | RSHIFTEQUAL\n                                | ANDEQUAL\n                                | OREQUAL\n         conditional_expression  : binary_expression\n                                    | binary_expression CONDOP expression COLON conditional_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression LSHIFT binary_expression\n                                | binary_expression RSHIFT binary_expression\n                                | binary_expression GT binary_expression\n                                | binary_expression GE binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression LE binary_expression\n                                | binary_expression EQ binary_expression\n                                | binary_expression NE binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression XOR binary_expression\n                                | binary_expression OR binary_expression\n                                | binary_expression LAND binary_expression\n                                | binary_expression LOR binary_expression\n         cast_expression : unary_expression  unary_expression    : postfix_expression  unary_expression    : PLUSPLUS unary_expression\n                                | MINUSMINUS unary_expression\n                                | unary_operator cast_expression\n         unary_operator  : AND\n                            | TIMES\n                            | PLUS\n                            | MINUS\n                            | NOT\n                            | LNOT\n         argument_expression_list    : assignment_expression\n                                        | argument_expression_list COMMA assignment_expression\n         postfix_expression  : primary_expression  postfix_expression  : postfix_expression LBRACKET expression RBRACKET  postfix_expression  : postfix_expression LPAREN argument_expression_list RPAREN\n                                | postfix_expression LPAREN RPAREN\n         postfix_expression  : postfix_expression PERIOD identifier\n                                | postfix_expression ARROW identifier\n         postfix_expression  : postfix_expression PLUSPLUS\n                                | postfix_expression MINUSMINUS\n         primary_expression  : identifier\n                                | constant\n                                | string_literal\n         primary_expression  : LPAREN expression RPAREN  identifier : ID  constant : INT_CONST  constant : FLOAT_CONST  constant : CHAR_CONST  string_literal : STRING_LITERAL  brace_open : LBRACE  brace_close : RBRACE  empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,33,58,79,127,222,],[-191,0,-19,-20,-21,-23,-24,-22,-49,-25,-190,-33,]),'AUTO':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,56,57,58,61,62,79,80,108,121,125,127,130,140,141,142,143,144,145,146,147,148,210,211,213,215,219,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[11,11,-21,-23,-24,11,11,11,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,11,-54,-56,-96,-189,-104,11,-26,-49,11,-55,-25,11,-27,-57,-97,-190,-105,11,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,11,-98,-106,-33,-35,-38,11,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'REGISTER':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,56,57,58,61,62,79,80,108,121,125,127,130,140,141,142,143,144,145,146,147,148,210,211,213,215,219,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[12,12,-21,-23,-24,12,12,12,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,12,-54,-56,-96,-189,-104,12,-26,-49,12,-55,-25,12,-27,-57,-97,-190,-105,12,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,12,-98,-106,-33,-35,-38,12,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'STATIC':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,56,57,58,60,61,62,67,79,80,108,112,121,123,125,127,130,140,141,142,143,144,145,146,147,148,210,211,213,215,219,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[13,13,-21,-23,-24,13,13,13,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,13,-54,-56,-96,-189,-104,13,-26,-49,111,13,-55,-74,-25,13,-27,209,-57,-75,-97,-190,-105,13,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,13,-98,-106,-33,-35,-38,13,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'EXTERN':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,56,57,58,61,62,79,80,108,121,125,127,130,140,141,142,143,144,145,146,147,148,210,211,213,215,219,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[14,14,-21,-23,-24,14,14,14,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,14,-54,-56,-96,-189,-104,14,-26,-49,14,-55,-25,14,-27,-57,-97,-190,-105,14,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,14,-98,-106,-33,-35,-38,14,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'TYPEDEF':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,56,57,58,61,62,79,80,108,121,125,127,130,140,141,142,143,144,145,146,147,148,210,211,213,215,219,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[15,15,-21,-23,-24,15,15,15,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,15,-54,-56,-96,-189,-104,15,-26,-49,15,-55,-25,15,-27,-57,-97,-190,-105,15,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,15,-98,-106,-33,-35,-38,15,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'CONST':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,41,47,49,50,51,56,57,58,60,61,62,66,67,72,73,74,75,76,77,79,80,108,111,112,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,208,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[19,19,-21,-23,-24,19,19,19,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,19,-54,-56,19,-96,-189,-104,19,19,-26,-49,19,19,-55,19,-74,19,19,-107,19,-112,19,-25,19,-27,19,19,-57,-75,-97,-190,19,-105,-108,-110,-111,-113,19,-34,-36,-37,-28,-29,-30,-31,-32,19,-61,-62,19,-98,-106,-109,-33,-35,-38,19,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'VOLATILE':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,41,47,49,50,51,56,57,58,60,61,62,66,67,72,73,74,75,76,77,79,80,108,111,112,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,208,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[20,20,-21,-23,-24,20,20,20,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,20,-54,-56,20,-96,-189,-104,20,20,-26,-49,20,20,-55,20,-74,20,20,-107,20,-112,20,-25,20,-27,20,20,-57,-75,-97,-190,20,-105,-108,-110,-111,-113,20,-34,-36,-37,-28,-29,-30,-31,-32,20,-61,-62,20,-98,-106,-109,-33,-35,-38,20,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'VOID':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[21,21,-21,-23,-24,21,21,21,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,21,-54,-56,-96,-189,-104,21,21,-26,-49,21,-55,-74,21,21,-107,21,-112,21,-25,21,-27,-57,-75,-97,-190,21,-105,-108,-110,-111,-113,21,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,21,-98,-106,-109,-33,-35,-38,21,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'CHAR':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[22,22,-21,-23,-24,22,22,22,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,22,-54,-56,-96,-189,-104,22,22,-26,-49,22,-55,-74,22,22,-107,22,-112,22,-25,22,-27,-57,-75,-97,-190,22,-105,-108,-110,-111,-113,22,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,22,-98,-106,-109,-33,-35,-38,22,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'SHORT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[23,23,-21,-23,-24,23,23,23,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,23,-54,-56,-96,-189,-104,23,23,-26,-49,23,-55,-74,23,23,-107,23,-112,23,-25,23,-27,-57,-75,-97,-190,23,-105,-108,-110,-111,-113,23,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,23,-98,-106,-109,-33,-35,-38,23,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'INT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[24,24,-21,-23,-24,24,24,24,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,24,-54,-56,-96,-189,-104,24,24,-26,-49,24,-55,-74,24,24,-107,24,-112,24,-25,24,-27,-57,-75,-97,-190,24,-105,-108,-110,-111,-113,24,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,24,-98,-106,-109,-33,-35,-38,24,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'LONG':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[25,25,-21,-23,-24,25,25,25,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,25,-54,-56,-96,-189,-104,25,25,-26,-49,25,-55,-74,25,25,-107,25,-112,25,-25,25,-27,-57,-75,-97,-190,25,-105,-108,-110,-111,-113,25,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,25,-98,-106,-109,-33,-35,-38,25,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'FLOAT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[26,26,-21,-23,-24,26,26,26,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,26,-54,-56,-96,-189,-104,26,26,-26,-49,26,-55,-74,26,26,-107,26,-112,26,-25,26,-27,-57,-75,-97,-190,26,-105,-108,-110,-111,-113,26,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,26,-98,-106,-109,-33,-35,-38,26,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'DOUBLE':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[27,27,-21,-23,-24,27,27,27,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,27,-54,-56,-96,-189,-104,27,27,-26,-49,27,-55,-74,27,27,-107,27,-112,27,-25,27,-27,-57,-75,-97,-190,27,-105,-108,-110,-111,-113,27,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,27,-98,-106,-109,-33,-35,-38,27,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'SIGNED':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[28,28,-21,-23,-24,28,28,28,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,28,-54,-56,-96,-189,-104,28,28,-26,-49,28,-55,-74,28,28,-107,28,-112,28,-25,28,-27,-57,-75,-97,-190,28,-105,-108,-110,-111,-113,28,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,28,-98,-106,-109,-33,-35,-38,28,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'UNSIGNED':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[29,29,-21,-23,-24,29,29,29,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,29,-54,-56,-96,-189,-104,29,29,-26,-49,29,-55,-74,29,29,-107,29,-112,29,-25,29,-27,-57,-75,-97,-190,29,-105,-108,-110,-111,-113,29,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,29,-98,-106,-109,-33,-35,-38,29,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'TYPEID':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[30,30,-21,-23,-24,30,30,30,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,30,-54,-56,-96,-189,-104,30,30,-26,-49,30,-55,-74,30,30,-107,30,-112,30,-25,30,-27,-57,-75,-97,-190,30,-105,-108,-110,-111,-113,30,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,30,-98,-106,-109,-33,-35,-38,30,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'ENUM':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[31,31,-21,-23,-24,31,31,31,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,31,-54,-56,-96,-189,-104,31,31,-26,-49,31,-55,-74,31,31,-107,31,-112,31,-25,31,-27,-57,-75,-97,-190,31,-105,-108,-110,-111,-113,31,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,31,-98,-106,-109,-33,-35,-38,31,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'STRUCT':([0,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,39,47,49,50,51,56,57,58,61,62,67,72,73,74,75,76,77,79,80,108,121,123,125,127,129,130,131,133,134,137,140,141,142,143,144,145,146,147,148,210,211,213,215,219,220,222,223,225,230,231,232,234,264,276,283,284,292,293,301,302,306,307,],[32,32,-21,-23,-24,32,32,32,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-22,32,-54,-56,-96,-189,-104,32,32,-26,-49,32,-55,-74,32,32,-107,32,-112,32,-25,32,-27,-57,-75,-97,-190,32,-105,-108,-110,-111,-113,32,-34,-36,-37,-28,-29,-30,-31,-32,-61,-62,32,-98,-106,-109,-33,-35,-38,32,-45,-46,-48,-58,-47,-59,-60,-39,-41,-40,-42,-44,-43,]),'ID':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,37,40,41,42,43,44,45,46,47,48,49,50,52,54,58,59,60,61,64,65,66,67,68,75,76,80,83,88,89,90,92,93,94,95,97,99,100,110,112,120,122,123,125,126,127,128,130,133,134,137,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,208,209,212,215,219,221,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[39,-191,-191,-191,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,47,50,39,39,-191,-69,-7,-8,-70,-71,-96,71,-189,-104,39,103,-49,39,-191,103,-72,-17,-18,-74,71,39,-112,103,103,103,103,103,-165,-166,-167,-164,103,-168,-169,103,-18,39,-73,-75,-97,71,-190,103,-105,-110,-111,-113,103,-34,-36,-37,-28,-29,-30,-31,-32,103,103,103,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-98,-106,39,-33,-35,-38,103,103,103,103,-45,-46,-48,103,103,-47,103,103,103,103,103,103,-39,-41,103,103,103,-40,-42,103,103,-44,-43,]),'LPAREN':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,39,40,41,42,43,44,45,46,47,49,50,52,54,58,59,60,62,64,65,66,67,75,76,80,83,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,120,121,122,123,125,127,128,130,133,134,137,140,141,142,143,144,145,146,147,148,150,152,153,154,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,208,209,210,211,215,219,221,222,223,225,226,227,228,230,231,232,234,236,259,261,262,263,264,273,275,276,279,280,281,282,283,284,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[40,-191,-191,-191,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,61,40,-56,40,-191,-69,-7,-8,-70,-71,-96,-189,-104,40,97,-49,40,-191,61,-72,-17,-18,-74,40,-112,97,97,195,97,97,97,-165,-166,-167,-164,-172,97,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,97,-18,40,-57,-73,-75,-97,-190,97,-105,-110,-111,-113,97,-34,-36,-37,-28,-29,-30,-31,-32,226,228,97,230,97,97,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-178,-179,97,97,-61,-62,-98,-106,40,-33,-35,-38,97,97,97,97,-45,-46,-48,97,-175,-176,-177,-183,-58,287,97,-47,97,-173,-174,97,-59,-60,97,97,97,97,-39,-41,97,97,97,-40,-42,97,97,-44,-43,]),'TIMES':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,41,42,43,44,45,46,47,49,50,52,54,58,59,60,64,65,66,67,75,76,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,120,123,125,127,128,130,133,134,137,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,208,209,215,219,221,222,223,225,226,227,228,230,231,232,234,236,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[41,-191,-191,-191,-78,-79,-80,-81,-82,-83,-84,-85,-76,-77,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,41,-191,-69,-7,-8,-70,-71,-96,-189,-104,41,92,-49,41,-191,41,-17,-18,-74,41,-112,92,92,-159,176,-160,92,92,92,-140,-165,-166,-167,-164,-172,92,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,92,-18,41,-75,-97,-190,92,-105,-110,-111,-113,92,-34,-36,-37,-28,-29,-30,-31,-32,92,92,92,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-178,-179,-161,-162,-163,-159,92,92,-98,-106,41,-33,-35,-38,92,92,92,92,-45,-46,-48,92,-141,-142,-143,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,-175,-176,-177,-183,92,-47,92,-173,-174,92,92,92,92,92,-39,-41,92,92,92,-40,-42,92,92,-44,-43,]),'PLUSPLUS':([19,20,49,54,58,60,65,67,80,83,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,208,209,222,223,225,226,227,228,230,231,232,234,236,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,88,-49,-191,-17,-74,88,88,198,88,88,88,-165,-166,-167,-164,-172,88,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,88,-18,-75,-190,88,88,-34,-36,-37,-28,-29,-30,-31,-32,88,88,88,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-178,-179,88,88,-33,-35,-38,88,88,88,88,-45,-46,-48,88,-175,-176,-177,-183,88,-47,88,-173,-174,88,88,88,88,88,-39,-41,88,88,88,-40,-42,88,88,-44,-43,]),'MINUSMINUS':([19,20,49,54,58,60,65,67,80,83,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,208,209,222,223,225,226,227,228,230,231,232,234,236,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,89,-49,-191,-17,-74,89,89,199,89,89,89,-165,-166,-167,-164,-172,89,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,89,-18,-75,-190,89,89,-34,-36,-37,-28,-29,-30,-31,-32,89,89,89,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-178,-179,89,89,-33,-35,-38,89,89,89,89,-45,-46,-48,89,-175,-176,-177,-183,89,-47,89,-173,-174,89,89,89,89,89,-39,-41,89,89,89,-40,-42,89,89,-44,-43,]),'AND':([19,20,49,54,58,60,65,67,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,208,209,222,223,225,226,227,228,230,231,232,234,236,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,95,-49,-191,-17,-74,95,95,-159,189,-160,95,95,95,-140,-165,-166,-167,-164,-172,95,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,95,-18,-75,-190,95,95,-34,-36,-37,-28,-29,-30,-31,-32,95,95,95,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-178,-179,-161,-162,-163,-159,95,95,-33,-35,-38,95,95,95,95,-45,-46,-48,95,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,189,189,189,189,-175,-176,-177,-183,95,-47,95,-173,-174,95,95,95,95,95,-39,-41,95,95,95,-40,-42,95,95,-44,-43,]),'PLUS':([19,20,49,54,58,60,65,67,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,208,209,222,223,225,226,227,228,230,231,232,234,236,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,93,-49,-191,-17,-74,93,93,-159,179,-160,93,93,93,-140,-165,-166,-167,-164,-172,93,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,93,-18,-75,-190,93,93,-34,-36,-37,-28,-29,-30,-31,-32,93,93,93,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-178,-179,-161,-162,-163,-159,93,93,-33,-35,-38,93,93,93,93,-45,-46,-48,93,-141,-142,-143,-144,-145,179,179,179,179,179,179,179,179,179,179,179,179,179,-175,-176,-177,-183,93,-47,93,-173,-174,93,93,93,93,93,-39,-41,93,93,93,-40,-42,93,93,-44,-43,]),'MINUS':([19,20,49,54,58,60,65,67,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,208,209,222,223,225,226,227,228,230,231,232,234,236,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,275,276,279,280,281,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,94,-49,-191,-17,-74,94,94,-159,180,-160,94,94,94,-140,-165,-166,-167,-164,-172,94,-180,-168,-169,-181,-182,-184,-185,-186,-187,-188,94,-18,-75,-190,94,94,-34,-36,-37,-28,-29,-30,-31,-32,94,94,94,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-178,-179,-161,-162,-163,-159,94,94,-33,-35,-38,94,94,94,94,-45,-46,-48,94,-141,-142,-143,-144,-145,180,180,180,180,180,180,180,180,180,180,180,180,180,-175,-176,-177,-183,94,-47,94,-173,-174,94,94,94,94,94,-39,-41,94,94,94,-40,-42,94,94,-44,-43,]),'NOT':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,99,-49,-191,-17,-74,99,99,99,99,99,-165,-166,-167,-164,99,-168,-169,99,-18,-75,-190,99,99,-34,-36,-37,-28,-29,-30,-31,-32,99,99,99,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-33,-35,-38,99,99,99,99,-45,-46,-48,99,99,-47,99,99,99,99,99,99,-39,-41,99,99,99,-40,-42,99,99,-44,-43,]),'LNOT':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,100,-49,-191,-17,-74,100,100,100,100,100,-165,-166,-167,-164,100,-168,-169,100,-18,-75,-190,100,100,-34,-36,-37,-28,-29,-30,-31,-32,100,100,100,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-33,-35,-38,100,100,100,100,-45,-46,-48,100,100,-47,100,100,100,100,100,100,-39,-41,100,100,100,-40,-42,100,100,-44,-43,]),'INT_CONST':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,104,-49,-191,-17,-74,104,104,104,104,104,-165,-166,-167,-164,104,-168,-169,104,-18,-75,-190,104,104,-34,-36,-37,-28,-29,-30,-31,-32,104,104,104,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-33,-35,-38,104,104,104,104,-45,-46,-48,104,104,-47,104,104,104,104,104,104,-39,-41,104,104,104,-40,-42,104,104,-44,-43,]),'FLOAT_CONST':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,105,-49,-191,-17,-74,105,105,105,105,105,-165,-166,-167,-164,105,-168,-169,105,-18,-75,-190,105,105,-34,-36,-37,-28,-29,-30,-31,-32,105,105,105,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-33,-35,-38,105,105,105,105,-45,-46,-48,105,105,-47,105,105,105,105,105,105,-39,-41,105,105,105,-40,-42,105,105,-44,-43,]),'CHAR_CONST':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,106,-49,-191,-17,-74,106,106,106,106,106,-165,-166,-167,-164,106,-168,-169,106,-18,-75,-190,106,106,-34,-36,-37,-28,-29,-30,-31,-32,106,106,106,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-33,-35,-38,106,106,106,106,-45,-46,-48,106,106,-47,106,106,106,106,106,106,-39,-41,106,106,106,-40,-42,106,106,-44,-43,]),'STRING_LITERAL':([19,20,49,54,58,60,65,67,80,83,88,89,90,92,93,94,95,97,99,100,110,112,123,127,128,140,141,142,143,144,145,146,147,148,153,157,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,222,223,225,226,227,228,230,231,232,234,236,275,276,279,282,285,286,287,288,292,293,296,297,299,301,302,304,305,306,307,],[-76,-77,-189,107,-49,-191,-17,-74,107,107,107,107,107,-165,-166,-167,-164,107,-168,-169,107,-18,-75,-190,107,107,-34,-36,-37,-28,-29,-30,-31,-32,107,107,107,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-33,-35,-38,107,107,107,107,-45,-46,-48,107,107,-47,107,107,107,107,107,107,-39,-41,107,107,107,-40,-42,107,107,-44,-43,]),'RBRACKET':([19,20,60,65,67,84,85,86,87,91,96,98,101,102,103,104,105,106,107,110,112,123,158,198,199,200,201,202,203,205,206,207,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,261,262,263,265,266,271,280,281,290,],[-76,-77,-191,-17,-74,-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-191,-18,-75,-123,-178,-179,-161,-162,-163,-159,264,-1,-2,-126,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,280,-175,-176,-177,-183,283,284,-124,-173,-174,-139,]),'LBRACE':([31,32,34,36,39,47,49,50,53,54,55,56,57,58,62,80,83,108,121,127,140,141,142,143,144,145,146,147,148,153,210,211,222,223,225,231,232,234,236,264,276,283,284,285,286,292,293,297,301,302,304,305,306,307,],[49,49,-191,-54,-56,49,-189,49,49,49,-5,-6,-26,-49,-55,49,49,-27,-57,-190,49,-34,-36,-37,-28,-29,-30,-31,-32,49,-61,-62,-33,-35,-38,-45,-46,-48,49,-58,-47,-59,-60,49,49,-39,-41,49,-40,-42,49,49,-44,-43,]),'SEMI':([34,35,36,38,39,49,58,62,78,80,81,82,84,85,86,87,91,96,98,101,102,103,104,105,106,107,109,121,127,132,135,136,139,140,141,142,143,144,145,146,147,148,149,151,153,155,156,157,158,198,199,200,201,202,203,210,211,222,223,224,225,230,231,232,233,234,235,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,264,269,271,274,275,276,277,280,281,283,284,285,286,288,289,290,292,293,295,297,298,301,302,304,305,306,307,],[-52,58,-54,-50,-56,-189,-49,-55,-52,-191,-53,-117,-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-51,-57,-190,220,-114,-116,-9,-191,-34,-36,-37,-28,-29,-30,-31,-32,225,-10,-191,231,232,234,-123,-178,-179,-161,-162,-163,-159,-61,-62,-33,-35,-9,-38,-191,-45,-46,276,-48,-118,-126,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-175,-176,-177,-183,-58,-115,-124,288,-191,-47,-119,-173,-174,-59,-60,-191,-191,-191,296,-139,-39,-41,299,-191,302,-40,-42,-191,-191,-44,-43,]),'COMMA':([34,35,36,38,39,62,69,70,71,78,81,82,84,85,86,87,91,96,98,101,102,103,104,105,106,107,109,116,117,118,119,121,124,126,127,135,136,151,158,160,162,198,199,200,201,202,203,204,210,211,214,216,217,218,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,267,268,270,271,272,277,278,280,281,283,284,290,291,294,],[-52,59,-54,-50,-56,-55,126,-99,-102,-52,-53,-117,-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-51,212,213,-63,-66,-57,126,-100,-190,221,-116,227,-123,236,-120,-178,-179,-161,-162,-163,-159,227,-61,-62,-68,-101,-103,-122,227,-118,-126,227,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,227,282,-175,-170,-176,-177,-183,-58,-64,-67,227,-124,227,-119,-121,-173,-174,-59,-60,-139,-171,227,]),'EQUALS':([34,36,39,62,71,78,85,87,96,98,101,102,103,104,105,106,107,121,198,199,200,201,202,203,210,211,259,261,262,263,264,280,281,283,284,],[54,-54,-56,-55,128,54,164,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-57,-178,-179,-161,-162,-163,-159,-61,-62,-175,-176,-177,-183,-58,-173,-174,-59,-60,]),'RPAREN':([36,39,61,62,63,84,85,86,87,91,96,98,101,102,103,104,105,106,107,113,114,115,116,117,118,119,121,151,158,195,198,199,200,201,202,203,204,210,211,214,224,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,258,259,260,261,262,263,264,267,268,270,271,272,280,281,283,284,290,291,294,296,299,300,303,],[-54,-56,-191,-55,121,-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,210,211,-11,-12,-65,-63,-66,-57,-10,-123,259,-178,-179,-161,-162,-163,-159,263,-61,-62,-68,-9,-126,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,281,-175,-170,-176,-177,-183,-58,-64,-67,285,-124,286,-173,-174,-59,-60,-139,-171,298,-191,-191,304,305,]),'LBRACKET':([36,39,62,87,96,98,101,102,103,104,105,106,107,121,198,199,210,211,259,261,262,263,264,280,281,283,284,],[60,-56,60,194,-172,-180,-181,-182,-184,-185,-186,-187,-188,-57,-178,-179,-61,-62,-175,-176,-177,-183,-58,-173,-174,-59,-60,]),'IF':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,150,-190,150,-34,-36,-37,-28,-29,-30,-31,-32,150,-33,-35,-38,-45,-46,-48,-47,150,150,-39,-41,150,-40,-42,150,150,-44,-43,]),'WHILE':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,229,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,152,-190,152,-34,-36,-37,-28,-29,-30,-31,-32,152,-33,-35,-38,273,-45,-46,-48,-47,152,152,-39,-41,152,-40,-42,152,152,-44,-43,]),'DO':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,153,-190,153,-34,-36,-37,-28,-29,-30,-31,-32,153,-33,-35,-38,-45,-46,-48,-47,153,153,-39,-41,153,-40,-42,153,153,-44,-43,]),'FOR':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,154,-190,154,-34,-36,-37,-28,-29,-30,-31,-32,154,-33,-35,-38,-45,-46,-48,-47,154,154,-39,-41,154,-40,-42,154,154,-44,-43,]),'BREAK':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,155,-190,155,-34,-36,-37,-28,-29,-30,-31,-32,155,-33,-35,-38,-45,-46,-48,-47,155,155,-39,-41,155,-40,-42,155,155,-44,-43,]),'CONTINUE':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,156,-190,156,-34,-36,-37,-28,-29,-30,-31,-32,156,-33,-35,-38,-45,-46,-48,-47,156,156,-39,-41,156,-40,-42,156,156,-44,-43,]),'RETURN':([49,58,80,127,140,141,142,143,144,145,146,147,148,153,222,223,225,231,232,234,276,285,286,292,293,297,301,302,304,305,306,307,],[-189,-49,157,-190,157,-34,-36,-37,-28,-29,-30,-31,-32,157,-33,-35,-38,-45,-46,-48,-47,157,157,-39,-41,157,-40,-42,157,157,-44,-43,]),'RBRACE':([49,58,69,70,71,73,74,80,82,83,84,85,86,87,91,96,98,101,102,103,104,105,106,107,124,126,127,129,131,138,139,140,141,142,143,144,145,146,147,148,159,160,161,162,198,199,200,201,202,203,216,217,218,220,222,223,225,231,232,234,235,236,237,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,276,277,278,280,281,290,292,293,301,302,306,307,],[-189,-49,127,-99,-102,127,-107,-191,-117,-191,-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,127,-100,-190,127,-108,127,-3,-4,-34,-36,-37,-28,-29,-30,-31,-32,127,-16,-15,-120,-178,-179,-161,-162,-163,-159,-101,-103,-122,-109,-33,-35,-38,-45,-46,-48,-118,127,-126,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-175,-176,-177,-183,-47,-119,-121,-173,-174,-139,-39,-41,-40,-42,-44,-43,]),'COLON':([84,85,86,87,91,96,98,101,102,103,104,105,106,107,158,198,199,200,201,202,203,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,271,280,281,290,],[-125,-159,-138,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-123,-178,-179,-161,-162,-163,-159,-126,279,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-175,-176,-177,-183,-124,-173,-174,-139,]),'CONDOP':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,175,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-175,-176,-177,-183,-173,-174,]),'DIVIDE':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,177,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,-175,-176,-177,-183,-173,-174,]),'MOD':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,178,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,-175,-176,-177,-183,-173,-174,]),'LSHIFT':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,181,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,181,181,181,181,181,181,181,181,181,181,181,-175,-176,-177,-183,-173,-174,]),'RSHIFT':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,182,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,182,182,182,182,182,182,182,182,182,182,182,-175,-176,-177,-183,-173,-174,]),'GT':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,183,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,183,183,183,183,183,183,183,-175,-176,-177,-183,-173,-174,]),'GE':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,184,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,184,184,184,184,184,184,184,-175,-176,-177,-183,-173,-174,]),'LT':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,185,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,185,185,185,185,185,185,185,-175,-176,-177,-183,-173,-174,]),'LE':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,186,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,186,186,186,186,186,186,186,-175,-176,-177,-183,-173,-174,]),'EQ':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,187,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,187,187,187,187,187,-175,-176,-177,-183,-173,-174,]),'NE':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,188,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,188,188,188,188,188,-175,-176,-177,-183,-173,-174,]),'XOR':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,190,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,190,190,190,-175,-176,-177,-183,-173,-174,]),'OR':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,191,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,191,191,-175,-176,-177,-183,-173,-174,]),'LAND':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,192,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,192,-175,-176,-177,-183,-173,-174,]),'LOR':([85,86,87,91,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,259,261,262,263,280,281,],[-159,193,-160,-140,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-175,-176,-177,-183,-173,-174,]),'XOREQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[165,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'TIMESEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[166,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'DIVEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[167,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'MODEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[168,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'PLUSEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[169,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'MINUSEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[170,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'LSHIFTEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[171,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'RSHIFTEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[172,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'ANDEQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[173,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'OREQUAL':([85,87,96,98,101,102,103,104,105,106,107,198,199,200,201,202,203,259,261,262,263,280,281,],[174,-160,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-161,-162,-163,-159,-175,-176,-177,-183,-173,-174,]),'PERIOD':([87,96,98,101,102,103,104,105,106,107,198,199,259,261,262,263,280,281,],[196,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-175,-176,-177,-183,-173,-174,]),'ARROW':([87,96,98,101,102,103,104,105,106,107,198,199,259,261,262,263,280,281,],[197,-172,-180,-181,-182,-184,-185,-186,-187,-188,-178,-179,-175,-176,-177,-183,-173,-174,]),'ELSE':([127,144,145,146,147,148,222,225,231,232,234,276,292,293,301,302,306,307,],[-190,-28,-29,-30,-31,-32,-33,-38,-45,-46,-48,-47,297,-41,-40,-42,-44,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit_or_empty':([0,],[1,]),'translation_unit':([0,],[2,]),'empty':([0,8,9,10,34,41,60,61,80,83,110,140,153,230,275,285,286,288,296,297,299,304,305,],[3,43,43,43,55,65,65,115,139,161,206,224,224,224,224,224,224,224,224,224,224,224,224,]),'external_declaration':([0,2,],[4,33,]),'function_defination':([0,2,],[5,5,]),'declaration':([0,2,34,56,80,140,230,],[6,6,57,108,142,142,275,]),'declaration_specifiers':([0,2,8,9,10,34,56,61,80,140,213,230,],[7,7,44,44,44,52,52,120,52,52,120,52,]),'storage_class_specifier':([0,2,8,9,10,34,56,61,80,140,213,230,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'type_specifier':([0,2,8,9,10,34,51,56,61,72,73,75,77,80,129,140,213,230,],[9,9,9,9,9,9,76,9,9,76,76,133,137,9,76,9,9,9,]),'type_qualifier':([0,2,8,9,10,34,41,51,56,60,61,66,72,73,75,77,80,111,112,129,140,208,213,230,],[10,10,10,10,10,10,67,67,10,67,10,123,67,67,134,123,10,67,123,67,10,123,10,10,]),'type_specifier_simple':([0,2,8,9,10,34,51,56,61,72,73,75,77,80,129,140,213,230,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'enum_specifier':([0,2,8,9,10,34,51,56,61,72,73,75,77,80,129,140,213,230,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'struct_specifier':([0,2,8,9,10,34,51,56,61,72,73,75,77,80,129,140,213,230,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'declarator':([7,40,52,59,75,120,221,],[34,63,78,78,136,214,136,]),'init_declarator_list':([7,52,],[35,35,]),'direct_declarator':([7,37,40,52,59,75,120,221,],[36,62,36,36,36,36,36,36,]),'pointer':([7,40,52,59,64,75,120,221,],[37,37,37,37,122,37,37,37,]),'init_declarator':([7,52,59,],[38,38,109,]),'declaration_specifiers_opt':([8,9,10,],[42,45,46,]),'brace_open':([31,32,47,50,53,54,80,83,140,153,236,285,286,297,304,305,],[48,51,68,72,80,83,80,83,80,80,83,80,80,80,80,80,]),'declaration_list_opt':([34,],[53,]),'declaration_list':([34,],[56,]),'type_qualifier_list_opt':([41,60,],[64,110,]),'type_qualifier_list':([41,51,60,72,73,111,129,],[66,77,112,77,77,208,77,]),'enumerator_list':([48,68,],[69,124,]),'enumerator':([48,68,126,],[70,70,216,]),'struct_declaration_list':([51,72,],[73,129,]),'struct_declaration':([51,72,73,129,],[74,74,131,131,]),'specifier_qualifier_list':([51,72,73,129,],[75,75,75,75,]),'compound_statement':([53,80,140,153,285,286,297,304,305,],[79,145,145,145,145,145,145,145,145,]),'initializer':([54,83,236,],[81,162,278,]),'assignment_expression':([54,80,83,97,110,140,153,157,163,175,194,195,208,209,226,227,228,230,236,275,282,285,286,287,288,296,297,299,304,305,],[82,158,82,158,207,158,158,158,237,158,158,260,265,266,158,271,158,158,82,158,291,158,158,158,158,158,158,158,158,158,]),'conditional_expression':([54,80,83,97,110,128,140,153,157,163,175,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[84,84,84,84,84,218,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,290,84,84,84,84,84,84,84,84,84,84,]),'unary_expression':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[85,85,85,200,201,203,85,85,203,85,85,85,85,85,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,85,85,85,85,85,85,85,85,85,85,203,85,85,85,85,85,85,85,85,85,85,]),'binary_expression':([54,80,83,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[86,86,86,86,86,86,86,86,86,86,86,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'postfix_expression':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'unary_operator':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cast_expression':([54,80,83,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[91,91,91,202,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'primary_expression':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'identifier':([54,61,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,208,209,212,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[98,118,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,261,262,98,98,267,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'constant':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'string_literal':([54,80,83,88,89,90,97,110,128,140,153,157,163,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,208,209,226,227,228,230,236,275,279,282,285,286,287,288,296,297,299,304,305,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'identifier_list_opt':([61,],[113,]),'parameter_type_list':([61,],[114,]),'identifier_list':([61,],[116,]),'parameter_list':([61,],[117,]),'parameter_declaration':([61,213,],[119,268,]),'brace_close':([69,73,124,129,138,159,236,],[125,130,215,219,222,235,277,]),'struct_declarator_list':([75,],[132,]),'struct_declarator':([75,221,],[135,269,]),'block_item_list_opt':([80,],[138,]),'block_item_list':([80,],[140,]),'block_item':([80,140,],[141,223,]),'statement':([80,140,153,285,286,297,304,305,],[143,143,229,292,293,301,306,307,]),'expression_statement':([80,140,153,285,286,297,304,305,],[144,144,144,144,144,144,144,144,]),'selection_statement':([80,140,153,285,286,297,304,305,],[146,146,146,146,146,146,146,146,]),'iteration_statement':([80,140,153,285,286,297,304,305,],[147,147,147,147,147,147,147,147,]),'jump_statement':([80,140,153,285,286,297,304,305,],[148,148,148,148,148,148,148,148,]),'expression_opt':([80,140,153,230,275,285,286,288,296,297,299,304,305,],[149,149,149,274,289,149,149,295,300,149,303,149,149,]),'expression':([80,97,140,153,157,175,194,226,228,230,275,285,286,287,288,296,297,299,304,305,],[151,204,151,151,233,238,257,270,272,151,151,151,151,294,151,151,151,151,151,151,]),'initializer_list_opt':([83,],[159,]),'initializer_list':([83,],[160,]),'assignment_operator':([85,],[163,]),'assignment_expression_opt':([110,],[205,]),'constant_expression':([128,],[217,]),'argument_expression_list':([195,],[258,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit_or_empty","S'",1,None,None,None),
  ('assignment_expression_opt -> empty','assignment_expression_opt',1,'p_assignment_expression_opt','utils.py',45),
  ('assignment_expression_opt -> assignment_expression','assignment_expression_opt',1,'p_assignment_expression_opt','utils.py',46),
  ('block_item_list_opt -> empty','block_item_list_opt',1,'p_block_item_list_opt','utils.py',45),
  ('block_item_list_opt -> block_item_list','block_item_list_opt',1,'p_block_item_list_opt','utils.py',46),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','utils.py',45),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','utils.py',46),
  ('declaration_specifiers_opt -> empty','declaration_specifiers_opt',1,'p_declaration_specifiers_opt','utils.py',45),
  ('declaration_specifiers_opt -> declaration_specifiers','declaration_specifiers_opt',1,'p_declaration_specifiers_opt','utils.py',46),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','utils.py',45),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','utils.py',46),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','utils.py',45),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','utils.py',46),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','utils.py',45),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','utils.py',46),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','utils.py',45),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','utils.py',46),
  ('type_qualifier_list_opt -> empty','type_qualifier_list_opt',1,'p_type_qualifier_list_opt','utils.py',45),
  ('type_qualifier_list_opt -> type_qualifier_list','type_qualifier_list_opt',1,'p_type_qualifier_list_opt','utils.py',46),
  ('translation_unit_or_empty -> translation_unit','translation_unit_or_empty',1,'p_translation_unit_or_empty','c_parser.py',409),
  ('translation_unit_or_empty -> empty','translation_unit_or_empty',1,'p_translation_unit_or_empty','c_parser.py',410),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','c_parser.py',418),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','c_parser.py',419),
  ('external_declaration -> function_defination','external_declaration',1,'p_external_declaration_1','c_parser.py',428),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','c_parser.py',432),
  ('function_defination -> declaration_specifiers declarator declaration_list_opt compound_statement','function_defination',4,'p_function_defination','c_parser.py',436),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','c_parser.py',449),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','c_parser.py',450),
  ('statement -> expression_statement','statement',1,'p_statement','c_parser.py',460),
  ('statement -> compound_statement','statement',1,'p_statement','c_parser.py',461),
  ('statement -> selection_statement','statement',1,'p_statement','c_parser.py',462),
  ('statement -> iteration_statement','statement',1,'p_statement','c_parser.py',463),
  ('statement -> jump_statement','statement',1,'p_statement','c_parser.py',464),
  ('compound_statement -> brace_open block_item_list_opt brace_close','compound_statement',3,'p_compound_statement','c_parser.py',469),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','c_parser.py',473),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','c_parser.py',474),
  ('block_item -> declaration','block_item',1,'p_block_item','c_parser.py',481),
  ('block_item -> statement','block_item',1,'p_block_item','c_parser.py',482),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','c_parser.py',487),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','c_parser.py',494),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','c_parser.py',498),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','c_parser.py',502),
  ('iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI','iteration_statement',7,'p_iteration_statement_2','c_parser.py',506),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_3','c_parser.py',510),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_4','c_parser.py',514),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','c_parser.py',519),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement_2','c_parser.py',523),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement_3','c_parser.py',527),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement_3','c_parser.py',528),
  ('declaration -> declaration_specifiers init_declarator_list SEMI','declaration',3,'p_declaration','c_parser.py',539),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','c_parser.py',548),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','c_parser.py',549),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','c_parser.py',556),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','c_parser.py',557),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','c_parser.py',565),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','c_parser.py',566),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator_1','c_parser.py',571),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','c_parser.py',579),
  ('direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET','direct_declarator',5,'p_direct_declarator_3','c_parser.py',583),
  ('direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list assignment_expression RBRACKET','direct_declarator',6,'p_direct_declarator_4','c_parser.py',593),
  ('direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET','direct_declarator',6,'p_direct_declarator_4','c_parser.py',594),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_6','c_parser.py',606),
  ('direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN','direct_declarator',4,'p_direct_declarator_6','c_parser.py',607),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','c_parser.py',621),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','c_parser.py',622),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','c_parser.py',633),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','c_parser.py',637),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','c_parser.py',638),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration_1','c_parser.py',647),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers_opt','declaration_specifiers',2,'p_declaration_specifiers_1','c_parser.py',674),
  ('declaration_specifiers -> type_specifier declaration_specifiers_opt','declaration_specifiers',2,'p_declaration_specifiers_2','c_parser.py',678),
  ('declaration_specifiers -> type_qualifier declaration_specifiers_opt','declaration_specifiers',2,'p_declaration_specifiers_3','c_parser.py',682),
  ('pointer -> TIMES type_qualifier_list_opt','pointer',2,'p_pointer','c_parser.py',690),
  ('pointer -> TIMES type_qualifier_list_opt pointer','pointer',3,'p_pointer','c_parser.py',691),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','c_parser.py',708),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','c_parser.py',709),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','c_parser.py',714),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','c_parser.py',715),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',720),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',721),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',722),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',723),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',724),
  ('type_specifier -> type_specifier_simple','type_specifier',1,'p_type_specifier','c_parser.py',731),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','c_parser.py',732),
  ('type_specifier -> struct_specifier','type_specifier',1,'p_type_specifier','c_parser.py',733),
  ('type_specifier_simple -> VOID','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',738),
  ('type_specifier_simple -> CHAR','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',739),
  ('type_specifier_simple -> SHORT','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',740),
  ('type_specifier_simple -> INT','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',741),
  ('type_specifier_simple -> LONG','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',742),
  ('type_specifier_simple -> FLOAT','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',743),
  ('type_specifier_simple -> DOUBLE','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',744),
  ('type_specifier_simple -> SIGNED','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',745),
  ('type_specifier_simple -> UNSIGNED','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',746),
  ('type_specifier_simple -> TYPEID','type_specifier_simple',1,'p_type_specifier_simple','c_parser.py',747),
  ('enum_specifier -> ENUM ID','enum_specifier',2,'p_enum_specifier_1','c_parser.py',755),
  ('enum_specifier -> ENUM brace_open enumerator_list brace_close','enum_specifier',4,'p_enum_specifier_2','c_parser.py',759),
  ('enum_specifier -> ENUM ID brace_open enumerator_list brace_close','enum_specifier',5,'p_enum_specifier_3','c_parser.py',764),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','c_parser.py',769),
  ('enumerator_list -> enumerator_list COMMA','enumerator_list',2,'p_enumerator_list','c_parser.py',770),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','c_parser.py',771),
  ('enumerator -> ID','enumerator',1,'p_enumerator','c_parser.py',782),
  ('enumerator -> ID EQUALS constant_expression','enumerator',3,'p_enumerator','c_parser.py',783),
  ('struct_specifier -> STRUCT ID','struct_specifier',2,'p_struct_specifier_1','c_parser.py',803),
  ('struct_specifier -> STRUCT brace_open struct_declaration_list brace_close','struct_specifier',4,'p_struct_specifier_2','c_parser.py',812),
  ('struct_specifier -> STRUCT ID brace_open struct_declaration_list brace_close','struct_specifier',5,'p_struct_specifier_3','c_parser.py',821),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','c_parser.py',830),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','c_parser.py',831),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI','struct_declaration',3,'p_struct_declaration','c_parser.py',841),
  ('specifier_qualifier_list -> specifier_qualifier_list type_specifier','specifier_qualifier_list',2,'p_specifier_qualifier_list_1','c_parser.py',854),
  ('specifier_qualifier_list -> specifier_qualifier_list type_qualifier','specifier_qualifier_list',2,'p_specifier_qualifier_list_2','c_parser.py',859),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_3','c_parser.py',864),
  ('specifier_qualifier_list -> type_qualifier_list type_specifier','specifier_qualifier_list',2,'p_specifier_qualifier_list_4','c_parser.py',869),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','c_parser.py',879),
  ('struct_declarator_list -> struct_declarator COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','c_parser.py',880),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','c_parser.py',887),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','c_parser.py',901),
  ('initializer -> brace_open initializer_list_opt brace_close','initializer',3,'p_initializer_2','c_parser.py',905),
  ('initializer -> brace_open initializer_list COMMA brace_close','initializer',4,'p_initializer_2','c_parser.py',906),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','c_parser.py',914),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','c_parser.py',915),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','c_parser.py',927),
  ('expression -> assignment_expression','expression',1,'p_expression','c_parser.py',935),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','c_parser.py',936),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','c_parser.py',950),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','c_parser.py',951),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','c_parser.py',961),
  ('assignment_operator -> XOREQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',962),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',963),
  ('assignment_operator -> DIVEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',964),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',965),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',966),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',967),
  ('assignment_operator -> LSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',968),
  ('assignment_operator -> RSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',969),
  ('assignment_operator -> ANDEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',970),
  ('assignment_operator -> OREQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',971),
  ('conditional_expression -> binary_expression','conditional_expression',1,'p_conditional_expression','c_parser.py',979),
  ('conditional_expression -> binary_expression CONDOP expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','c_parser.py',980),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','c_parser.py',992),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',993),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',994),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',995),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',996),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',997),
  ('binary_expression -> binary_expression LSHIFT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',998),
  ('binary_expression -> binary_expression RSHIFT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',999),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1000),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1001),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1002),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1003),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1004),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1005),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1006),
  ('binary_expression -> binary_expression XOR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1007),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1008),
  ('binary_expression -> binary_expression LAND binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1009),
  ('binary_expression -> binary_expression LOR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1010),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','c_parser.py',1023),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','c_parser.py',1036),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1040),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1041),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1042),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','c_parser.py',1048),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','c_parser.py',1049),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','c_parser.py',1050),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','c_parser.py',1051),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','c_parser.py',1052),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','c_parser.py',1053),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','c_parser.py',1060),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','c_parser.py',1061),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','c_parser.py',1074),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','c_parser.py',1078),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression_3','c_parser.py',1082),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','c_parser.py',1083),
  ('postfix_expression -> postfix_expression PERIOD identifier','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1088),
  ('postfix_expression -> postfix_expression ARROW identifier','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1089),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_5','c_parser.py',1096),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_5','c_parser.py',1097),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','c_parser.py',1106),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','c_parser.py',1107),
  ('primary_expression -> string_literal','primary_expression',1,'p_primary_expression_1','c_parser.py',1108),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','c_parser.py',1113),
  ('identifier -> ID','identifier',1,'p_identifier','c_parser.py',1119),
  ('constant -> INT_CONST','constant',1,'p_constant_1','c_parser.py',1125),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','c_parser.py',1141),
  ('constant -> CHAR_CONST','constant',1,'p_constant_3','c_parser.py',1151),
  ('string_literal -> STRING_LITERAL','string_literal',1,'p_string_literal','c_parser.py',1157),
  ('brace_open -> LBRACE','brace_open',1,'p_brace_open','c_parser.py',1162),
  ('brace_close -> RBRACE','brace_close',1,'p_brace_close','c_parser.py',1167),
  ('empty -> <empty>','empty',0,'p_empty','c_parser.py',1174),
]
